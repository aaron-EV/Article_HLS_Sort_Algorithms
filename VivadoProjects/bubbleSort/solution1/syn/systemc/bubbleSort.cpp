// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "bubbleSort.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic bubbleSort::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic bubbleSort::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> bubbleSort::ap_ST_st1_fsm_0 = "1";
const sc_lv<6> bubbleSort::ap_ST_st2_fsm_1 = "10";
const sc_lv<6> bubbleSort::ap_ST_st3_fsm_2 = "100";
const sc_lv<6> bubbleSort::ap_ST_st4_fsm_3 = "1000";
const sc_lv<6> bubbleSort::ap_ST_st5_fsm_4 = "10000";
const sc_lv<6> bubbleSort::ap_ST_st6_fsm_5 = "100000";
const sc_lv<32> bubbleSort::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> bubbleSort::ap_const_lv1_1 = "1";
const sc_lv<8> bubbleSort::ap_const_lv8_1 = "1";
const sc_lv<32> bubbleSort::ap_const_lv32_1 = "1";
const sc_lv<32> bubbleSort::ap_const_lv32_3 = "11";
const sc_lv<1> bubbleSort::ap_const_lv1_0 = "0";
const sc_lv<4> bubbleSort::ap_const_lv4_4 = "100";
const sc_lv<8> bubbleSort::ap_const_lv8_0 = "00000000";
const sc_lv<3> bubbleSort::ap_const_lv3_0 = "000";
const sc_lv<32> bubbleSort::ap_const_lv32_2 = "10";
const sc_lv<32> bubbleSort::ap_const_lv32_4 = "100";
const sc_lv<16> bubbleSort::ap_const_lv16_0 = "0000000000000000";
const sc_lv<3> bubbleSort::ap_const_lv3_1 = "1";
const sc_lv<4> bubbleSort::ap_const_lv4_F = "1111";
const sc_lv<32> bubbleSort::ap_const_lv32_5 = "101";

bubbleSort::bubbleSort(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( A_addr_2_reg_206 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_1_fu_125_p1 );
    sensitive << ( tmp_2_i_fu_154_p1 );

    SC_METHOD(thread_A_address1);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( A_addr_1_reg_200 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_5_i_fu_159_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_ce1);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_d0);
    sensitive << ( A_q0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_d1);
    sensitive << ( A_q1 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_we0);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_6_i_fu_170_p2 );

    SC_METHOD(thread_A_we1);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_6_i_fu_170_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_s_reg_110 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_ap_sig_106);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_157);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_68);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_96);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_21 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_59 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_96 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_68 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_106 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_157 );

    SC_METHOD(thread_exitcond_i_fu_142_p2);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( indvars_iv_i_reg_87 );
    sensitive << ( j_i_cast_fu_138_p1 );

    SC_METHOD(thread_i_fu_164_p2);
    sensitive << ( indvars_iv_i_reg_87 );

    SC_METHOD(thread_j_fu_148_p2);
    sensitive << ( j_i_reg_99 );

    SC_METHOD(thread_j_i_cast_fu_138_p1);
    sensitive << ( j_i_reg_99 );

    SC_METHOD(thread_operation_read_read_fu_42_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( operation );

    SC_METHOD(thread_tmp_1_fu_125_p1);
    sensitive << ( indexOutputData );

    SC_METHOD(thread_tmp_2_i_fu_154_p1);
    sensitive << ( j_i_reg_99 );

    SC_METHOD(thread_tmp_5_i_fu_159_p1);
    sensitive << ( j_fu_148_p2 );

    SC_METHOD(thread_tmp_6_i_fu_170_p2);
    sensitive << ( A_q0 );
    sensitive << ( A_q1 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_tmp_fu_130_p3);
    sensitive << ( indvars_iv_i_reg_87 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( operation_read_read_fu_42_p2 );
    sensitive << ( exitcond_i_fu_142_p2 );
    sensitive << ( tmp_fu_130_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "bubbleSort_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_we0, "(port)A_we0");
    sc_trace(mVcdFile, A_d0, "(port)A_d0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, A_address1, "(port)A_address1");
    sc_trace(mVcdFile, A_ce1, "(port)A_ce1");
    sc_trace(mVcdFile, A_we1, "(port)A_we1");
    sc_trace(mVcdFile, A_d1, "(port)A_d1");
    sc_trace(mVcdFile, A_q1, "(port)A_q1");
    sc_trace(mVcdFile, indexOutputData, "(port)indexOutputData");
    sc_trace(mVcdFile, operation, "(port)operation");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_21, "ap_sig_21");
    sc_trace(mVcdFile, operation_read_read_fu_42_p2, "operation_read_read_fu_42_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_59, "ap_sig_59");
    sc_trace(mVcdFile, j_fu_148_p2, "j_fu_148_p2");
    sc_trace(mVcdFile, j_reg_195, "j_reg_195");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_68, "ap_sig_68");
    sc_trace(mVcdFile, A_addr_1_reg_200, "A_addr_1_reg_200");
    sc_trace(mVcdFile, exitcond_i_fu_142_p2, "exitcond_i_fu_142_p2");
    sc_trace(mVcdFile, A_addr_2_reg_206, "A_addr_2_reg_206");
    sc_trace(mVcdFile, i_fu_164_p2, "i_fu_164_p2");
    sc_trace(mVcdFile, indvars_iv_i_reg_87, "indvars_iv_i_reg_87");
    sc_trace(mVcdFile, j_i_reg_99, "j_i_reg_99");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_96, "ap_sig_96");
    sc_trace(mVcdFile, tmp_fu_130_p3, "tmp_fu_130_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_106, "ap_sig_106");
    sc_trace(mVcdFile, p_s_reg_110, "p_s_reg_110");
    sc_trace(mVcdFile, tmp_1_fu_125_p1, "tmp_1_fu_125_p1");
    sc_trace(mVcdFile, tmp_2_i_fu_154_p1, "tmp_2_i_fu_154_p1");
    sc_trace(mVcdFile, tmp_5_i_fu_159_p1, "tmp_5_i_fu_159_p1");
    sc_trace(mVcdFile, tmp_6_i_fu_170_p2, "tmp_6_i_fu_170_p2");
    sc_trace(mVcdFile, j_i_cast_fu_138_p1, "j_i_cast_fu_138_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_157, "ap_sig_157");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("bubbleSort.hdltvin.dat");
    mHdltvoutHandle.open("bubbleSort.hdltvout.dat");
}

bubbleSort::~bubbleSort() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void bubbleSort::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,8,8>(operation_read_read_fu_42_p2.read(), ap_const_lv8_0))) {
        indvars_iv_i_reg_87 = ap_const_lv4_4;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                !esl_seteq<1,1,1>(exitcond_i_fu_142_p2.read(), ap_const_lv1_0))) {
        indvars_iv_i_reg_87 = i_fu_164_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        j_i_reg_99 = j_reg_195.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_130_p3.read()))) {
        j_i_reg_99 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_130_p3.read()))) {
        p_s_reg_110 = ap_const_lv16_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        p_s_reg_110 = A_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && esl_seteq<1,1,1>(exitcond_i_fu_142_p2.read(), ap_const_lv1_0))) {
        A_addr_1_reg_200 =  (sc_lv<3>) (tmp_2_i_fu_154_p1.read());
        A_addr_2_reg_206 =  (sc_lv<3>) (tmp_5_i_fu_159_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        j_reg_195 = j_fu_148_p2.read();
    }
}

void bubbleSort::thread_A_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        A_address0 = A_addr_2_reg_206.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        A_address0 =  (sc_lv<3>) (tmp_2_i_fu_154_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        A_address0 =  (sc_lv<3>) (tmp_1_fu_125_p1.read());
    } else {
        A_address0 = "XXX";
    }
}

void bubbleSort::thread_A_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        A_address1 = A_addr_1_reg_200.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        A_address1 =  (sc_lv<3>) (tmp_5_i_fu_159_p1.read());
    } else {
        A_address1 = "XXX";
    }
}

void bubbleSort::thread_A_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void bubbleSort::thread_A_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        A_ce1 = ap_const_logic_1;
    } else {
        A_ce1 = ap_const_logic_0;
    }
}

void bubbleSort::thread_A_d0() {
    A_d0 = A_q0.read();
}

void bubbleSort::thread_A_d1() {
    A_d1 = A_q1.read();
}

void bubbleSort::thread_A_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_i_fu_170_p2.read())))) {
        A_we0 = ap_const_logic_1;
    } else {
        A_we0 = ap_const_logic_0;
    }
}

void bubbleSort::thread_A_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_6_i_fu_170_p2.read())))) {
        A_we1 = ap_const_logic_1;
    } else {
        A_we1 = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_return() {
    ap_return = p_s_reg_110.read();
}

void bubbleSort::thread_ap_sig_106() {
    ap_sig_106 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void bubbleSort::thread_ap_sig_157() {
    ap_sig_157 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void bubbleSort::thread_ap_sig_21() {
    ap_sig_21 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void bubbleSort::thread_ap_sig_59() {
    ap_sig_59 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void bubbleSort::thread_ap_sig_68() {
    ap_sig_68 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void bubbleSort::thread_ap_sig_96() {
    ap_sig_96 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void bubbleSort::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_21.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_59.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_96.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_68.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_106.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void bubbleSort::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_157.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void bubbleSort::thread_exitcond_i_fu_142_p2() {
    exitcond_i_fu_142_p2 = (!j_i_cast_fu_138_p1.read().is_01() || !indvars_iv_i_reg_87.read().is_01())? sc_lv<1>(): sc_lv<1>(j_i_cast_fu_138_p1.read() == indvars_iv_i_reg_87.read());
}

void bubbleSort::thread_i_fu_164_p2() {
    i_fu_164_p2 = (!indvars_iv_i_reg_87.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(indvars_iv_i_reg_87.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void bubbleSort::thread_j_fu_148_p2() {
    j_fu_148_p2 = (!j_i_reg_99.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_i_reg_99.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void bubbleSort::thread_j_i_cast_fu_138_p1() {
    j_i_cast_fu_138_p1 = esl_zext<4,3>(j_i_reg_99.read());
}

void bubbleSort::thread_operation_read_read_fu_42_p2() {
    operation_read_read_fu_42_p2 = operation.read();
}

void bubbleSort::thread_tmp_1_fu_125_p1() {
    tmp_1_fu_125_p1 = esl_sext<64,8>(indexOutputData.read());
}

void bubbleSort::thread_tmp_2_i_fu_154_p1() {
    tmp_2_i_fu_154_p1 = esl_zext<64,3>(j_i_reg_99.read());
}

void bubbleSort::thread_tmp_5_i_fu_159_p1() {
    tmp_5_i_fu_159_p1 = esl_zext<64,3>(j_fu_148_p2.read());
}

void bubbleSort::thread_tmp_6_i_fu_170_p2() {
    tmp_6_i_fu_170_p2 = (!A_q0.read().is_01() || !A_q1.read().is_01())? sc_lv<1>(): (sc_bigint<16>(A_q0.read()) > sc_bigint<16>(A_q1.read()));
}

void bubbleSort::thread_tmp_fu_130_p3() {
    tmp_fu_130_p3 = indvars_iv_i_reg_87.read().range(3, 3);
}

void bubbleSort::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,8,8>(operation_read_read_fu_42_p2.read(), ap_const_lv8_0) && !esl_seteq<1,8,8>(operation_read_read_fu_42_p2.read(), ap_const_lv8_1))) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,8,8>(operation_read_read_fu_42_p2.read(), ap_const_lv8_0))) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,8,8>(operation_read_read_fu_42_p2.read(), ap_const_lv8_1))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_130_p3.read())) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(exitcond_i_fu_142_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void bubbleSort::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we0\" :  \"" << A_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d0\" :  \"" << A_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address1\" :  \"" << A_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce1\" :  \"" << A_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we1\" :  \"" << A_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d1\" :  \"" << A_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q1\" :  \"" << A_q1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"indexOutputData\" :  \"" << indexOutputData.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"operation\" :  \"" << operation.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

