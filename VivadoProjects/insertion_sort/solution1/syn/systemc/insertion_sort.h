// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _insertion_sort_HH_
#define _insertion_sort_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "insertion_sort_fcmp_32ns_32ns_1_1.h"

namespace ap_rtl {

struct insertion_sort : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_out< sc_logic > A_we0;
    sc_out< sc_lv<32> > A_d0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<6> > A_address1;
    sc_out< sc_logic > A_ce1;
    sc_out< sc_logic > A_we1;
    sc_out< sc_lv<32> > A_d1;
    sc_in< sc_lv<32> > A_q1;
    sc_signal< sc_lv<5> > ap_var_for_const0;


    // Module declarations
    insertion_sort(sc_module_name name);
    SC_HAS_PROCESS(insertion_sort);

    ~insertion_sort();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    insertion_sort_fcmp_32ns_32ns_1_1<1,1,32,32,1>* insertion_sort_fcmp_32ns_32ns_1_1_U0;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_20;
    sc_signal< sc_lv<7> > i_cast_fu_82_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_47;
    sc_signal< sc_lv<7> > j_fu_96_p2;
    sc_signal< sc_lv<7> > j_reg_218;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_56;
    sc_signal< sc_lv<6> > A_addr_reg_226;
    sc_signal< sc_lv<1> > tmp_fu_106_p2;
    sc_signal< sc_lv<6> > A_addr_1_reg_231;
    sc_signal< sc_lv<6> > i_1_fu_122_p2;
    sc_signal< sc_lv<32> > temp_reg_241;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_76;
    sc_signal< sc_lv<32> > A_load_1_reg_248;
    sc_signal< sc_lv<6> > i_reg_57;
    sc_signal< sc_lv<7> > j_0_in_reg_69;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_92;
    sc_signal< sc_lv<1> > exitcond_fu_86_p2;
    sc_signal< sc_lv<64> > tmp_1_fu_112_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_117_p1;
    sc_signal< sc_lv<1> > tmp_10_fu_204_p2;
    sc_signal< sc_lv<32> > j_cast_fu_102_p1;
    sc_signal< sc_lv<32> > j_0_in_cast_fu_92_p1;
    sc_signal< sc_lv<32> > temp_to_int_fu_128_p1;
    sc_signal< sc_lv<32> > A_load_1_to_int_fu_145_p1;
    sc_signal< sc_lv<8> > tmp_3_fu_131_p4;
    sc_signal< sc_lv<23> > tmp_4_fu_141_p1;
    sc_signal< sc_lv<1> > notrhs_fu_168_p2;
    sc_signal< sc_lv<1> > notlhs_fu_162_p2;
    sc_signal< sc_lv<8> > tmp_5_fu_148_p4;
    sc_signal< sc_lv<23> > tmp_6_fu_158_p1;
    sc_signal< sc_lv<1> > notrhs2_fu_186_p2;
    sc_signal< sc_lv<1> > notlhs1_fu_180_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_174_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_192_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_198_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_78_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_st1_fsm_0;
    static const sc_lv<5> ap_ST_st2_fsm_1;
    static const sc_lv<5> ap_ST_st3_fsm_2;
    static const sc_lv<5> ap_ST_st4_fsm_3;
    static const sc_lv<5> ap_ST_st5_fsm_4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<6> ap_const_lv6_30;
    static const sc_lv<7> ap_const_lv7_7F;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_address1();
    void thread_A_ce0();
    void thread_A_ce1();
    void thread_A_d0();
    void thread_A_d1();
    void thread_A_load_1_to_int_fu_145_p1();
    void thread_A_we0();
    void thread_A_we1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_20();
    void thread_ap_sig_47();
    void thread_ap_sig_56();
    void thread_ap_sig_76();
    void thread_ap_sig_92();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_exitcond_fu_86_p2();
    void thread_i_1_fu_122_p2();
    void thread_i_cast_fu_82_p1();
    void thread_j_0_in_cast_fu_92_p1();
    void thread_j_cast_fu_102_p1();
    void thread_j_fu_96_p2();
    void thread_notlhs1_fu_180_p2();
    void thread_notlhs_fu_162_p2();
    void thread_notrhs2_fu_186_p2();
    void thread_notrhs_fu_168_p2();
    void thread_temp_to_int_fu_128_p1();
    void thread_tmp_10_fu_204_p2();
    void thread_tmp_1_fu_112_p1();
    void thread_tmp_2_fu_117_p1();
    void thread_tmp_3_fu_131_p4();
    void thread_tmp_4_fu_141_p1();
    void thread_tmp_5_fu_148_p4();
    void thread_tmp_6_fu_158_p1();
    void thread_tmp_7_fu_174_p2();
    void thread_tmp_8_fu_192_p2();
    void thread_tmp_9_fu_198_p2();
    void thread_tmp_fu_106_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
