// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "insertion_sort.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic insertion_sort::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic insertion_sort::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> insertion_sort::ap_ST_st1_fsm_0 = "1";
const sc_lv<5> insertion_sort::ap_ST_st2_fsm_1 = "10";
const sc_lv<5> insertion_sort::ap_ST_st3_fsm_2 = "100";
const sc_lv<5> insertion_sort::ap_ST_st4_fsm_3 = "1000";
const sc_lv<5> insertion_sort::ap_ST_st5_fsm_4 = "10000";
const sc_lv<32> insertion_sort::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> insertion_sort::ap_const_lv1_1 = "1";
const sc_lv<32> insertion_sort::ap_const_lv32_1 = "1";
const sc_lv<32> insertion_sort::ap_const_lv32_2 = "10";
const sc_lv<1> insertion_sort::ap_const_lv1_0 = "0";
const sc_lv<32> insertion_sort::ap_const_lv32_3 = "11";
const sc_lv<6> insertion_sort::ap_const_lv6_1 = "1";
const sc_lv<32> insertion_sort::ap_const_lv32_4 = "100";
const sc_lv<6> insertion_sort::ap_const_lv6_30 = "110000";
const sc_lv<7> insertion_sort::ap_const_lv7_7F = "1111111";
const sc_lv<7> insertion_sort::ap_const_lv7_0 = "0000000";
const sc_lv<32> insertion_sort::ap_const_lv32_17 = "10111";
const sc_lv<32> insertion_sort::ap_const_lv32_1E = "11110";
const sc_lv<8> insertion_sort::ap_const_lv8_FF = "11111111";
const sc_lv<23> insertion_sort::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> insertion_sort::ap_const_lv5_2 = "10";

insertion_sort::insertion_sort(sc_module_name name) : sc_module(name), mVcdFile(0) {
    insertion_sort_fcmp_32ns_32ns_1_1_U0 = new insertion_sort_fcmp_32ns_32ns_1_1<1,1,32,32,1>("insertion_sort_fcmp_32ns_32ns_1_1_U0");
    insertion_sort_fcmp_32ns_32ns_1_1_U0->din0(temp_reg_241);
    insertion_sort_fcmp_32ns_32ns_1_1_U0->din1(A_load_1_reg_248);
    insertion_sort_fcmp_32ns_32ns_1_1_U0->opcode(ap_var_for_const0);
    insertion_sort_fcmp_32ns_32ns_1_1_U0->dout(tmp_s_fu_78_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( A_addr_reg_226 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_1_fu_112_p1 );

    SC_METHOD(thread_A_address1);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( A_addr_1_reg_231 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_2_fu_117_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_ce1);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_d0);
    sensitive << ( A_load_1_reg_248 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_d1);
    sensitive << ( temp_reg_241 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );

    SC_METHOD(thread_A_load_1_to_int_fu_145_p1);
    sensitive << ( A_load_1_reg_248 );

    SC_METHOD(thread_A_we0);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_10_fu_204_p2 );

    SC_METHOD(thread_A_we1);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_10_fu_204_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_86_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond_fu_86_p2 );

    SC_METHOD(thread_ap_sig_20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_56);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_76);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_92);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_20 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_47 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_56 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_76 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_92 );

    SC_METHOD(thread_exitcond_fu_86_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_reg_57 );

    SC_METHOD(thread_i_1_fu_122_p2);
    sensitive << ( i_reg_57 );

    SC_METHOD(thread_i_cast_fu_82_p1);
    sensitive << ( i_reg_57 );

    SC_METHOD(thread_j_0_in_cast_fu_92_p1);
    sensitive << ( j_0_in_reg_69 );

    SC_METHOD(thread_j_cast_fu_102_p1);
    sensitive << ( j_fu_96_p2 );

    SC_METHOD(thread_j_fu_96_p2);
    sensitive << ( j_0_in_reg_69 );

    SC_METHOD(thread_notlhs1_fu_180_p2);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_5_fu_148_p4 );

    SC_METHOD(thread_notlhs_fu_162_p2);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_3_fu_131_p4 );

    SC_METHOD(thread_notrhs2_fu_186_p2);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_6_fu_158_p1 );

    SC_METHOD(thread_notrhs_fu_168_p2);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( tmp_4_fu_141_p1 );

    SC_METHOD(thread_temp_to_int_fu_128_p1);
    sensitive << ( temp_reg_241 );

    SC_METHOD(thread_tmp_10_fu_204_p2);
    sensitive << ( tmp_9_fu_198_p2 );
    sensitive << ( tmp_s_fu_78_p2 );

    SC_METHOD(thread_tmp_1_fu_112_p1);
    sensitive << ( j_cast_fu_102_p1 );

    SC_METHOD(thread_tmp_2_fu_117_p1);
    sensitive << ( j_0_in_cast_fu_92_p1 );

    SC_METHOD(thread_tmp_3_fu_131_p4);
    sensitive << ( temp_to_int_fu_128_p1 );

    SC_METHOD(thread_tmp_4_fu_141_p1);
    sensitive << ( temp_to_int_fu_128_p1 );

    SC_METHOD(thread_tmp_5_fu_148_p4);
    sensitive << ( A_load_1_to_int_fu_145_p1 );

    SC_METHOD(thread_tmp_6_fu_158_p1);
    sensitive << ( A_load_1_to_int_fu_145_p1 );

    SC_METHOD(thread_tmp_7_fu_174_p2);
    sensitive << ( notrhs_fu_168_p2 );
    sensitive << ( notlhs_fu_162_p2 );

    SC_METHOD(thread_tmp_8_fu_192_p2);
    sensitive << ( notrhs2_fu_186_p2 );
    sensitive << ( notlhs1_fu_180_p2 );

    SC_METHOD(thread_tmp_9_fu_198_p2);
    sensitive << ( tmp_7_fu_174_p2 );
    sensitive << ( tmp_8_fu_192_p2 );

    SC_METHOD(thread_tmp_fu_106_p2);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( j_0_in_reg_69 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_106_p2 );
    sensitive << ( exitcond_fu_86_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "insertion_sort_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_we0, "(port)A_we0");
    sc_trace(mVcdFile, A_d0, "(port)A_d0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, A_address1, "(port)A_address1");
    sc_trace(mVcdFile, A_ce1, "(port)A_ce1");
    sc_trace(mVcdFile, A_we1, "(port)A_we1");
    sc_trace(mVcdFile, A_d1, "(port)A_d1");
    sc_trace(mVcdFile, A_q1, "(port)A_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_20, "ap_sig_20");
    sc_trace(mVcdFile, i_cast_fu_82_p1, "i_cast_fu_82_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_47, "ap_sig_47");
    sc_trace(mVcdFile, j_fu_96_p2, "j_fu_96_p2");
    sc_trace(mVcdFile, j_reg_218, "j_reg_218");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_56, "ap_sig_56");
    sc_trace(mVcdFile, A_addr_reg_226, "A_addr_reg_226");
    sc_trace(mVcdFile, tmp_fu_106_p2, "tmp_fu_106_p2");
    sc_trace(mVcdFile, A_addr_1_reg_231, "A_addr_1_reg_231");
    sc_trace(mVcdFile, i_1_fu_122_p2, "i_1_fu_122_p2");
    sc_trace(mVcdFile, temp_reg_241, "temp_reg_241");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_76, "ap_sig_76");
    sc_trace(mVcdFile, A_load_1_reg_248, "A_load_1_reg_248");
    sc_trace(mVcdFile, i_reg_57, "i_reg_57");
    sc_trace(mVcdFile, j_0_in_reg_69, "j_0_in_reg_69");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_92, "ap_sig_92");
    sc_trace(mVcdFile, exitcond_fu_86_p2, "exitcond_fu_86_p2");
    sc_trace(mVcdFile, tmp_1_fu_112_p1, "tmp_1_fu_112_p1");
    sc_trace(mVcdFile, tmp_2_fu_117_p1, "tmp_2_fu_117_p1");
    sc_trace(mVcdFile, tmp_10_fu_204_p2, "tmp_10_fu_204_p2");
    sc_trace(mVcdFile, j_cast_fu_102_p1, "j_cast_fu_102_p1");
    sc_trace(mVcdFile, j_0_in_cast_fu_92_p1, "j_0_in_cast_fu_92_p1");
    sc_trace(mVcdFile, temp_to_int_fu_128_p1, "temp_to_int_fu_128_p1");
    sc_trace(mVcdFile, A_load_1_to_int_fu_145_p1, "A_load_1_to_int_fu_145_p1");
    sc_trace(mVcdFile, tmp_3_fu_131_p4, "tmp_3_fu_131_p4");
    sc_trace(mVcdFile, tmp_4_fu_141_p1, "tmp_4_fu_141_p1");
    sc_trace(mVcdFile, notrhs_fu_168_p2, "notrhs_fu_168_p2");
    sc_trace(mVcdFile, notlhs_fu_162_p2, "notlhs_fu_162_p2");
    sc_trace(mVcdFile, tmp_5_fu_148_p4, "tmp_5_fu_148_p4");
    sc_trace(mVcdFile, tmp_6_fu_158_p1, "tmp_6_fu_158_p1");
    sc_trace(mVcdFile, notrhs2_fu_186_p2, "notrhs2_fu_186_p2");
    sc_trace(mVcdFile, notlhs1_fu_180_p2, "notlhs1_fu_180_p2");
    sc_trace(mVcdFile, tmp_7_fu_174_p2, "tmp_7_fu_174_p2");
    sc_trace(mVcdFile, tmp_8_fu_192_p2, "tmp_8_fu_192_p2");
    sc_trace(mVcdFile, tmp_9_fu_198_p2, "tmp_9_fu_198_p2");
    sc_trace(mVcdFile, tmp_s_fu_78_p2, "tmp_s_fu_78_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("insertion_sort.hdltvin.dat");
    mHdltvoutHandle.open("insertion_sort.hdltvout.dat");
}

insertion_sort::~insertion_sort() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete insertion_sort_fcmp_32ns_32ns_1_1_U0;
}

void insertion_sort::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv5_2;
}

void insertion_sort::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_106_p2.read(), ap_const_lv1_0))) {
        i_reg_57 = i_1_fu_122_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        i_reg_57 = ap_const_lv6_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_86_p2.read()))) {
        j_0_in_reg_69 = i_cast_fu_82_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        j_0_in_reg_69 = j_reg_218.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && !esl_seteq<1,1,1>(tmp_fu_106_p2.read(), ap_const_lv1_0))) {
        A_addr_1_reg_231 =  (sc_lv<6>) (tmp_2_fu_117_p1.read());
        A_addr_reg_226 =  (sc_lv<6>) (tmp_1_fu_112_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        A_load_1_reg_248 = A_q1.read();
        temp_reg_241 = A_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_reg_218 = j_fu_96_p2.read();
    }
}

void insertion_sort::thread_A_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        A_address0 = A_addr_reg_226.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        A_address0 =  (sc_lv<6>) (tmp_1_fu_112_p1.read());
    } else {
        A_address0 = "XXXXXX";
    }
}

void insertion_sort::thread_A_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        A_address1 = A_addr_1_reg_231.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        A_address1 =  (sc_lv<6>) (tmp_2_fu_117_p1.read());
    } else {
        A_address1 = "XXXXXX";
    }
}

void insertion_sort::thread_A_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void insertion_sort::thread_A_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()))) {
        A_ce1 = ap_const_logic_1;
    } else {
        A_ce1 = ap_const_logic_0;
    }
}

void insertion_sort::thread_A_d0() {
    A_d0 = A_load_1_reg_248.read();
}

void insertion_sort::thread_A_d1() {
    A_d1 = temp_reg_241.read();
}

void insertion_sort::thread_A_load_1_to_int_fu_145_p1() {
    A_load_1_to_int_fu_145_p1 = A_load_1_reg_248.read();
}

void insertion_sort::thread_A_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_10_fu_204_p2.read())))) {
        A_we0 = ap_const_logic_1;
    } else {
        A_we0 = ap_const_logic_0;
    }
}

void insertion_sort::thread_A_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_10_fu_204_p2.read())))) {
        A_we1 = ap_const_logic_1;
    } else {
        A_we1 = ap_const_logic_0;
    }
}

void insertion_sort::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_86_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void insertion_sort::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void insertion_sort::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_86_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void insertion_sort::thread_ap_sig_20() {
    ap_sig_20 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void insertion_sort::thread_ap_sig_47() {
    ap_sig_47 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void insertion_sort::thread_ap_sig_56() {
    ap_sig_56 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void insertion_sort::thread_ap_sig_76() {
    ap_sig_76 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void insertion_sort::thread_ap_sig_92() {
    ap_sig_92 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void insertion_sort::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_20.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void insertion_sort::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_47.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void insertion_sort::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_56.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void insertion_sort::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_76.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void insertion_sort::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_92.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void insertion_sort::thread_exitcond_fu_86_p2() {
    exitcond_fu_86_p2 = (!i_reg_57.read().is_01() || !ap_const_lv6_30.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_57.read() == ap_const_lv6_30);
}

void insertion_sort::thread_i_1_fu_122_p2() {
    i_1_fu_122_p2 = (!i_reg_57.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_57.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void insertion_sort::thread_i_cast_fu_82_p1() {
    i_cast_fu_82_p1 = esl_zext<7,6>(i_reg_57.read());
}

void insertion_sort::thread_j_0_in_cast_fu_92_p1() {
    j_0_in_cast_fu_92_p1 = esl_sext<32,7>(j_0_in_reg_69.read());
}

void insertion_sort::thread_j_cast_fu_102_p1() {
    j_cast_fu_102_p1 = esl_sext<32,7>(j_fu_96_p2.read());
}

void insertion_sort::thread_j_fu_96_p2() {
    j_fu_96_p2 = (!j_0_in_reg_69.read().is_01() || !ap_const_lv7_7F.is_01())? sc_lv<7>(): (sc_biguint<7>(j_0_in_reg_69.read()) + sc_bigint<7>(ap_const_lv7_7F));
}

void insertion_sort::thread_notlhs1_fu_180_p2() {
    notlhs1_fu_180_p2 = (!tmp_5_fu_148_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_148_p4.read() != ap_const_lv8_FF);
}

void insertion_sort::thread_notlhs_fu_162_p2() {
    notlhs_fu_162_p2 = (!tmp_3_fu_131_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_131_p4.read() != ap_const_lv8_FF);
}

void insertion_sort::thread_notrhs2_fu_186_p2() {
    notrhs2_fu_186_p2 = (!tmp_6_fu_158_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_158_p1.read() == ap_const_lv23_0);
}

void insertion_sort::thread_notrhs_fu_168_p2() {
    notrhs_fu_168_p2 = (!tmp_4_fu_141_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_141_p1.read() == ap_const_lv23_0);
}

void insertion_sort::thread_temp_to_int_fu_128_p1() {
    temp_to_int_fu_128_p1 = temp_reg_241.read();
}

void insertion_sort::thread_tmp_10_fu_204_p2() {
    tmp_10_fu_204_p2 = (tmp_9_fu_198_p2.read() & tmp_s_fu_78_p2.read());
}

void insertion_sort::thread_tmp_1_fu_112_p1() {
    tmp_1_fu_112_p1 = esl_zext<64,32>(j_cast_fu_102_p1.read());
}

void insertion_sort::thread_tmp_2_fu_117_p1() {
    tmp_2_fu_117_p1 = esl_zext<64,32>(j_0_in_cast_fu_92_p1.read());
}

void insertion_sort::thread_tmp_3_fu_131_p4() {
    tmp_3_fu_131_p4 = temp_to_int_fu_128_p1.read().range(30, 23);
}

void insertion_sort::thread_tmp_4_fu_141_p1() {
    tmp_4_fu_141_p1 = temp_to_int_fu_128_p1.read().range(23-1, 0);
}

void insertion_sort::thread_tmp_5_fu_148_p4() {
    tmp_5_fu_148_p4 = A_load_1_to_int_fu_145_p1.read().range(30, 23);
}

void insertion_sort::thread_tmp_6_fu_158_p1() {
    tmp_6_fu_158_p1 = A_load_1_to_int_fu_145_p1.read().range(23-1, 0);
}

void insertion_sort::thread_tmp_7_fu_174_p2() {
    tmp_7_fu_174_p2 = (notrhs_fu_168_p2.read() | notlhs_fu_162_p2.read());
}

void insertion_sort::thread_tmp_8_fu_192_p2() {
    tmp_8_fu_192_p2 = (notrhs2_fu_186_p2.read() | notlhs1_fu_180_p2.read());
}

void insertion_sort::thread_tmp_9_fu_198_p2() {
    tmp_9_fu_198_p2 = (tmp_7_fu_174_p2.read() & tmp_8_fu_192_p2.read());
}

void insertion_sort::thread_tmp_fu_106_p2() {
    tmp_fu_106_p2 = (!j_0_in_reg_69.read().is_01() || !ap_const_lv7_0.is_01())? sc_lv<1>(): (sc_bigint<7>(j_0_in_reg_69.read()) > sc_bigint<7>(ap_const_lv7_0));
}

void insertion_sort::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_86_p2.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(tmp_fu_106_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

void insertion_sort::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we0\" :  \"" << A_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d0\" :  \"" << A_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address1\" :  \"" << A_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce1\" :  \"" << A_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we1\" :  \"" << A_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d1\" :  \"" << A_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q1\" :  \"" << A_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

