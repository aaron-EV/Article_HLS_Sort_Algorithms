-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity insertion_sort is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of insertion_sort is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "insertion_sort,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.739000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=167,HLS_SYN_LUT=141}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_20 : BOOLEAN;
    signal i_cast_fu_82_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_47 : BOOLEAN;
    signal j_fu_96_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_218 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_56 : BOOLEAN;
    signal A_addr_reg_226 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_addr_1_reg_231 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_fu_122_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_76 : BOOLEAN;
    signal A_load_1_reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_57 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_in_reg_69 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_92 : BOOLEAN;
    signal exitcond_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_fu_102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_in_cast_fu_92_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_to_int_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_1_to_int_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_131_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_141_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_148_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_158_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component insertion_sort_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    insertion_sort_fcmp_32ns_32ns_1_1_U0 : component insertion_sort_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => temp_reg_241,
        din1 => A_load_1_reg_248,
        opcode => ap_const_lv5_2,
        dout => tmp_s_fu_78_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_57_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (tmp_fu_106_p2 = ap_const_lv1_0))) then 
                i_reg_57 <= i_1_fu_122_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_57 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    j_0_in_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_86_p2))) then 
                j_0_in_reg_69 <= i_cast_fu_82_p1;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_0_in_reg_69 <= j_reg_218;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((tmp_fu_106_p2 = ap_const_lv1_0)))) then
                A_addr_1_reg_231 <= tmp_2_fu_117_p1(6 - 1 downto 0);
                A_addr_reg_226 <= tmp_1_fu_112_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                A_load_1_reg_248 <= A_q1;
                temp_reg_241 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_reg_218 <= j_fu_96_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_106_p2, exitcond_fu_86_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond_fu_86_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((tmp_fu_106_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, A_addr_reg_226, ap_sig_cseq_ST_st5_fsm_4, tmp_1_fu_112_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            A_address0 <= A_addr_reg_226;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            A_address0 <= tmp_1_fu_112_p1(6 - 1 downto 0);
        else 
            A_address0 <= "XXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, A_addr_1_reg_231, ap_sig_cseq_ST_st5_fsm_4, tmp_2_fu_117_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            A_address1 <= A_addr_1_reg_231;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            A_address1 <= tmp_2_fu_117_p1(6 - 1 downto 0);
        else 
            A_address1 <= "XXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= A_load_1_reg_248;
    A_d1 <= temp_reg_241;
    A_load_1_to_int_fu_145_p1 <= A_load_1_reg_248;

    A_we0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_10_fu_204_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_10_fu_204_p2))))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_10_fu_204_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_10_fu_204_p2))))) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_86_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_86_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_86_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_86_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_47_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_47 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_56 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_76 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_92 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_20)
    begin
        if (ap_sig_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_47)
    begin
        if (ap_sig_47) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_56)
    begin
        if (ap_sig_56) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_76)
    begin
        if (ap_sig_76) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_92)
    begin
        if (ap_sig_92) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_86_p2 <= "1" when (i_reg_57 = ap_const_lv6_30) else "0";
    i_1_fu_122_p2 <= std_logic_vector(unsigned(i_reg_57) + unsigned(ap_const_lv6_1));
    i_cast_fu_82_p1 <= std_logic_vector(resize(unsigned(i_reg_57),7));
        j_0_in_cast_fu_92_p1 <= std_logic_vector(resize(signed(j_0_in_reg_69),32));

        j_cast_fu_102_p1 <= std_logic_vector(resize(signed(j_fu_96_p2),32));

    j_fu_96_p2 <= std_logic_vector(unsigned(j_0_in_reg_69) + unsigned(ap_const_lv7_7F));
    notlhs1_fu_180_p2 <= "0" when (tmp_5_fu_148_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_162_p2 <= "0" when (tmp_3_fu_131_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_186_p2 <= "1" when (tmp_6_fu_158_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_168_p2 <= "1" when (tmp_4_fu_141_p1 = ap_const_lv23_0) else "0";
    temp_to_int_fu_128_p1 <= temp_reg_241;
    tmp_10_fu_204_p2 <= (tmp_9_fu_198_p2 and tmp_s_fu_78_p2);
    tmp_1_fu_112_p1 <= std_logic_vector(resize(unsigned(j_cast_fu_102_p1),64));
    tmp_2_fu_117_p1 <= std_logic_vector(resize(unsigned(j_0_in_cast_fu_92_p1),64));
    tmp_3_fu_131_p4 <= temp_to_int_fu_128_p1(30 downto 23);
    tmp_4_fu_141_p1 <= temp_to_int_fu_128_p1(23 - 1 downto 0);
    tmp_5_fu_148_p4 <= A_load_1_to_int_fu_145_p1(30 downto 23);
    tmp_6_fu_158_p1 <= A_load_1_to_int_fu_145_p1(23 - 1 downto 0);
    tmp_7_fu_174_p2 <= (notrhs_fu_168_p2 or notlhs_fu_162_p2);
    tmp_8_fu_192_p2 <= (notrhs2_fu_186_p2 or notlhs1_fu_180_p2);
    tmp_9_fu_198_p2 <= (tmp_7_fu_174_p2 and tmp_8_fu_192_p2);
    tmp_fu_106_p2 <= "1" when (signed(j_0_in_reg_69) > signed(ap_const_lv7_0)) else "0";
end behav;
