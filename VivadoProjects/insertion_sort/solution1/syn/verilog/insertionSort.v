// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="insertionSort,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.484000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=102,HLS_SYN_LUT=183}" *)

module insertionSort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result_data,
        agg_result_data_ap_vld,
        agg_result_done_V,
        agg_result_done_V_ap_vld,
        dataIn,
        posOutData
);

parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv9_100 = 9'b100000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv64_FF = 64'b11111111;
parameter    ap_const_lv9_1FF = 9'b111111111;
parameter    ap_const_lv9_0 = 9'b000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] agg_result_data;
output   agg_result_data_ap_vld;
output  [0:0] agg_result_done_V;
output   agg_result_done_V_ap_vld;
input  [15:0] dataIn;
input  [7:0] posOutData;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg agg_result_data_ap_vld;
reg agg_result_done_V_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_21;
reg   [15:0] count;
reg   [0:0] sOutData_done_V;
reg   [7:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [15:0] A_d0;
wire   [15:0] A_q0;
reg   [7:0] A_address1;
reg    A_ce1;
reg    A_we1;
wire   [15:0] A_q1;
reg   [15:0] sOutData_data;
reg   [0:0] flagFill;
wire   [0:0] flagFill_load_load_fu_211_p1;
reg   [0:0] flagFill_load_reg_340;
wire   [0:0] icmp_fu_201_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_78;
wire   [0:0] exitcond_i_fu_236_p2;
wire   [8:0] j_fu_281_p2;
reg   [8:0] j_reg_357;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_94;
reg   [7:0] A_addr_1_reg_365;
wire   [0:0] tmp_i_fu_291_p2;
reg   [7:0] A_addr_2_reg_371;
wire   [8:0] i_fu_307_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_113;
reg   [8:0] i_i_reg_132;
reg   [8:0] j_0_in_i_reg_144;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_128;
reg   [0:0] sOutData_done_V_loc_reg_154;
reg   [15:0] storemerge1_reg_166;
reg   [0:0] storemerge_reg_176;
wire  signed [63:0] tmp_1_fu_215_p1;
wire   [63:0] gepindex2_fu_268_p3;
wire   [63:0] tmp_5_i_fu_297_p1;
wire   [63:0] tmp_6_i_fu_302_p1;
wire   [15:0] tmp_2_fu_220_p2;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_162;
wire   [0:0] tmp_7_i_fu_313_p2;
wire   [7:0] tmp_fu_191_p4;
wire  signed [10:0] mem_index_gep4_cast_fu_254_p1;
wire   [0:0] tmp_3_fu_261_p3;
wire   [63:0] adjSize_fu_257_p1;
wire  signed [31:0] j_cast_fu_287_p1;
wire  signed [31:0] j_0_in_i_cast_fu_277_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'b1;
#0 count = 16'b0000000000000000;
#0 sOutData_done_V = 1'b0;
#0 sOutData_data = 16'b0000000000000000;
#0 flagFill = 1'b0;
end

insertionSort_A #(
    .DataWidth( 16 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(A_d0),
    .q0(A_q0),
    .address1(A_address1),
    .ce1(A_ce1),
    .we1(A_we1),
    .d1(A_q1),
    .q1(A_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (1'b0 == icmp_fu_201_p2) & (1'b0 == flagFill_load_load_fu_211_p1))) begin
        i_i_reg_132 <= ap_const_lv9_1;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == tmp_i_fu_291_p2))) begin
        i_i_reg_132 <= i_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == flagFill_load_reg_340) & (1'b0 == exitcond_i_fu_236_p2))) begin
        j_0_in_i_reg_144 <= i_i_reg_132;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_0_in_i_reg_144 <= j_reg_357;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (1'b0 == icmp_fu_201_p2) & ~(1'b0 == flagFill_load_load_fu_211_p1))) begin
        sOutData_done_V_loc_reg_154 <= sOutData_done_V;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == flagFill_load_reg_340) & ~(1'b0 == exitcond_i_fu_236_p2))) begin
        sOutData_done_V_loc_reg_154 <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(1'b0 == icmp_fu_201_p2))) begin
        storemerge1_reg_166 <= sOutData_data;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        storemerge1_reg_166 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(1'b0 == icmp_fu_201_p2))) begin
        storemerge_reg_176 <= sOutData_done_V;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        storemerge_reg_176 <= sOutData_done_V_loc_reg_154;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(1'b0 == tmp_i_fu_291_p2))) begin
        A_addr_1_reg_365 <= tmp_5_i_fu_297_p1;
        A_addr_2_reg_371 <= tmp_6_i_fu_302_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(1'b0 == icmp_fu_201_p2))) begin
        count <= tmp_2_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == flagFill_load_reg_340) & ~(1'b0 == exitcond_i_fu_236_p2))) begin
        flagFill <= 1'b1;
        sOutData_done_V <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (1'b0 == icmp_fu_201_p2))) begin
        flagFill_load_reg_340 <= flagFill;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_reg_357 <= j_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        sOutData_data <= A_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_address0 = A_addr_2_reg_371;
    end else if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        A_address0 = tmp_1_fu_215_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        A_address0 = tmp_5_i_fu_297_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        A_address0 = gepindex2_fu_268_p3;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_address1 = A_addr_1_reg_365;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        A_address1 = tmp_6_i_fu_302_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0)) | (1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_d0 = A_q0;
    end else if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        A_d0 = dataIn;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(1'b0 == icmp_fu_201_p2)) | ((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_7_i_fu_313_p2)))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_7_i_fu_313_p2))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        agg_result_data_ap_vld = 1'b1;
    end else begin
        agg_result_data_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        agg_result_done_V_ap_vld = 1'b1;
    end else begin
        agg_result_done_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_78) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_94) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_128) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_113) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_162) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if ((~(ap_start == 1'b0) & ~(1'b0 == icmp_fu_201_p2))) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else if ((~(ap_start == 1'b0) & (1'b0 == icmp_fu_201_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((~(1'b0 == flagFill_load_reg_340) | ~(1'b0 == exitcond_i_fu_236_p2))) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((1'b0 == tmp_i_fu_291_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign adjSize_fu_257_p1 = $unsigned(mem_index_gep4_cast_fu_254_p1);

assign agg_result_data = storemerge1_reg_166;

assign agg_result_done_V = storemerge_reg_176;

always @ (*) begin
    ap_sig_113 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_128 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_162 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_21 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_78 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_94 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign exitcond_i_fu_236_p2 = ((i_i_reg_132 == ap_const_lv9_100) ? 1'b1 : 1'b0);

assign flagFill_load_load_fu_211_p1 = flagFill;

assign gepindex2_fu_268_p3 = ((tmp_3_fu_261_p3[0:0] === 1'b1) ? ap_const_lv64_FF : adjSize_fu_257_p1);

assign i_fu_307_p2 = (i_i_reg_132 + ap_const_lv9_1);

assign icmp_fu_201_p2 = (($signed(tmp_fu_191_p4) < $signed(8'b1)) ? 1'b1 : 1'b0);

assign j_0_in_i_cast_fu_277_p1 = $signed(j_0_in_i_reg_144);

assign j_cast_fu_287_p1 = $signed(j_fu_281_p2);

assign j_fu_281_p2 = ($signed(j_0_in_i_reg_144) + $signed(ap_const_lv9_1FF));

assign mem_index_gep4_cast_fu_254_p1 = $signed(posOutData);

assign tmp_1_fu_215_p1 = $signed(count);

assign tmp_2_fu_220_p2 = (count + ap_const_lv16_1);

assign tmp_3_fu_261_p3 = posOutData[ap_const_lv32_7];

assign tmp_5_i_fu_297_p1 = $unsigned(j_cast_fu_287_p1);

assign tmp_6_i_fu_302_p1 = $unsigned(j_0_in_i_cast_fu_277_p1);

assign tmp_7_i_fu_313_p2 = (($signed(A_q0) > $signed(A_q1)) ? 1'b1 : 1'b0);

assign tmp_fu_191_p4 = {{count[ap_const_lv32_F : ap_const_lv32_8]}};

assign tmp_i_fu_291_p2 = (($signed(j_0_in_i_reg_144) > $signed(9'b000000000)) ? 1'b1 : 1'b0);

endmodule //insertionSort
