// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="insertion_sort,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.739000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=167,HLS_SYN_LUT=141}" *)

module insertion_sort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1
);

parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv6_30 = 6'b110000;
parameter    ap_const_lv7_7F = 7'b1111111;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv5_2 = 5'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [5:0] A_address1;
output   A_ce1;
output   A_we1;
output  [31:0] A_d1;
input  [31:0] A_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] A_address0;
reg A_ce0;
reg A_we0;
reg[5:0] A_address1;
reg A_ce1;
reg A_we1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_20;
wire   [6:0] i_cast_fu_82_p1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_47;
wire   [6:0] j_fu_96_p2;
reg   [6:0] j_reg_218;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_56;
reg   [5:0] A_addr_reg_226;
wire   [0:0] tmp_fu_106_p2;
reg   [5:0] A_addr_1_reg_231;
wire   [5:0] i_1_fu_122_p2;
reg   [31:0] temp_reg_241;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_76;
reg   [31:0] A_load_1_reg_248;
reg   [5:0] i_reg_57;
reg   [6:0] j_0_in_reg_69;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_92;
wire   [0:0] exitcond_fu_86_p2;
wire   [63:0] tmp_1_fu_112_p1;
wire   [63:0] tmp_2_fu_117_p1;
wire   [0:0] tmp_10_fu_204_p2;
wire  signed [31:0] j_cast_fu_102_p1;
wire  signed [31:0] j_0_in_cast_fu_92_p1;
wire   [31:0] temp_to_int_fu_128_p1;
wire   [31:0] A_load_1_to_int_fu_145_p1;
wire   [7:0] tmp_3_fu_131_p4;
wire   [22:0] tmp_4_fu_141_p1;
wire   [0:0] notrhs_fu_168_p2;
wire   [0:0] notlhs_fu_162_p2;
wire   [7:0] tmp_5_fu_148_p4;
wire   [22:0] tmp_6_fu_158_p1;
wire   [0:0] notrhs2_fu_186_p2;
wire   [0:0] notlhs1_fu_180_p2;
wire   [0:0] tmp_7_fu_174_p2;
wire   [0:0] tmp_8_fu_192_p2;
wire   [0:0] tmp_9_fu_198_p2;
wire   [0:0] tmp_s_fu_78_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
end

insertion_sort_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
insertion_sort_fcmp_32ns_32ns_1_1_U0(
    .din0(temp_reg_241),
    .din1(A_load_1_reg_248),
    .opcode(ap_const_lv5_2),
    .dout(tmp_s_fu_78_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_fu_106_p2 == 1'b0))) begin
        i_reg_57 <= i_1_fu_122_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_57 <= ap_const_lv6_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond_fu_86_p2))) begin
        j_0_in_reg_69 <= i_cast_fu_82_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        j_0_in_reg_69 <= j_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(tmp_fu_106_p2 == 1'b0))) begin
        A_addr_1_reg_231 <= tmp_2_fu_117_p1;
        A_addr_reg_226 <= tmp_1_fu_112_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_load_1_reg_248 <= A_q1;
        temp_reg_241 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_reg_218 <= j_fu_96_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        A_address0 = A_addr_reg_226;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        A_address0 = tmp_1_fu_112_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        A_address1 = A_addr_1_reg_231;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        A_address1 = tmp_2_fu_117_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == tmp_10_fu_204_p2))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & ~(1'b0 == tmp_10_fu_204_p2))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond_fu_86_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond_fu_86_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_47) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_56) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_76) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_92) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond_fu_86_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((tmp_fu_106_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = A_load_1_reg_248;

assign A_d1 = temp_reg_241;

assign A_load_1_to_int_fu_145_p1 = A_load_1_reg_248;

always @ (*) begin
    ap_sig_20 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_47 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_56 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_76 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_92 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

assign exitcond_fu_86_p2 = ((i_reg_57 == ap_const_lv6_30) ? 1'b1 : 1'b0);

assign i_1_fu_122_p2 = (i_reg_57 + ap_const_lv6_1);

assign i_cast_fu_82_p1 = i_reg_57;

assign j_0_in_cast_fu_92_p1 = $signed(j_0_in_reg_69);

assign j_cast_fu_102_p1 = $signed(j_fu_96_p2);

assign j_fu_96_p2 = ($signed(j_0_in_reg_69) + $signed(ap_const_lv7_7F));

assign notlhs1_fu_180_p2 = ((tmp_5_fu_148_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs_fu_162_p2 = ((tmp_3_fu_131_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs2_fu_186_p2 = ((tmp_6_fu_158_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs_fu_168_p2 = ((tmp_4_fu_141_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign temp_to_int_fu_128_p1 = temp_reg_241;

assign tmp_10_fu_204_p2 = (tmp_9_fu_198_p2 & tmp_s_fu_78_p2);

assign tmp_1_fu_112_p1 = $unsigned(j_cast_fu_102_p1);

assign tmp_2_fu_117_p1 = $unsigned(j_0_in_cast_fu_92_p1);

assign tmp_3_fu_131_p4 = {{temp_to_int_fu_128_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_4_fu_141_p1 = temp_to_int_fu_128_p1[22:0];

assign tmp_5_fu_148_p4 = {{A_load_1_to_int_fu_145_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_6_fu_158_p1 = A_load_1_to_int_fu_145_p1[22:0];

assign tmp_7_fu_174_p2 = (notrhs_fu_168_p2 | notlhs_fu_162_p2);

assign tmp_8_fu_192_p2 = (notrhs2_fu_186_p2 | notlhs1_fu_180_p2);

assign tmp_9_fu_198_p2 = (tmp_7_fu_174_p2 & tmp_8_fu_192_p2);

assign tmp_fu_106_p2 = (($signed(j_0_in_reg_69) > $signed(7'b0000000)) ? 1'b1 : 1'b0);

endmodule //insertion_sort
