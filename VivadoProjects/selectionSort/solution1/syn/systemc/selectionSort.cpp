// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "selectionSort.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic selectionSort::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic selectionSort::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> selectionSort::ap_ST_st1_fsm_0 = "1";
const sc_lv<9> selectionSort::ap_ST_st2_fsm_1 = "10";
const sc_lv<9> selectionSort::ap_ST_st3_fsm_2 = "100";
const sc_lv<9> selectionSort::ap_ST_st4_fsm_3 = "1000";
const sc_lv<9> selectionSort::ap_ST_st5_fsm_4 = "10000";
const sc_lv<9> selectionSort::ap_ST_st6_fsm_5 = "100000";
const sc_lv<9> selectionSort::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<9> selectionSort::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<9> selectionSort::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<32> selectionSort::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> selectionSort::ap_const_lv1_1 = "1";
const sc_lv<1> selectionSort::ap_const_lv1_0 = "0";
const sc_lv<32> selectionSort::ap_const_lv32_1 = "1";
const sc_lv<32> selectionSort::ap_const_lv32_2 = "10";
const sc_lv<32> selectionSort::ap_const_lv32_3 = "11";
const sc_lv<32> selectionSort::ap_const_lv32_4 = "100";
const sc_lv<32> selectionSort::ap_const_lv32_7 = "111";
const sc_lv<32> selectionSort::ap_const_lv32_6 = "110";
const sc_lv<8> selectionSort::ap_const_lv8_0 = "00000000";
const sc_lv<16> selectionSort::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> selectionSort::ap_const_lv32_5 = "101";
const sc_lv<8> selectionSort::ap_const_lv8_FF = "11111111";
const sc_lv<8> selectionSort::ap_const_lv8_1 = "1";
const sc_lv<16> selectionSort::ap_const_lv16_1 = "1";
const sc_lv<16> selectionSort::ap_const_lv16_FF = "11111111";
const sc_lv<32> selectionSort::ap_const_lv32_8 = "1000";

selectionSort::selectionSort(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( A_addr_1_reg_223 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond_i_fu_164_p2 );
    sensitive << ( A_addr_2_reg_248 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_fu_132_p1 );
    sensitive << ( tmp_i_fu_153_p1 );
    sensitive << ( tmp_3_i_fu_170_p1 );
    sensitive << ( tmp_1_i_fu_175_p1 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond_i_fu_164_p2 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_A_d0);
    sensitive << ( A_q0 );
    sensitive << ( min_2_reg_228 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_A_we0);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_0_reg_117 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_sig_101);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_111);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_120);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_149);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_197);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_74);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_83);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_24 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_59 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_74 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_83 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_101 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_149 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_120 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_111 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_197 );

    SC_METHOD(thread_exitcond1_i_fu_141_p2);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( index_min_reg_77 );

    SC_METHOD(thread_exitcond_i_fu_164_p2);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( j_0_in_i_reg_108 );

    SC_METHOD(thread_i_fu_147_p2);
    sensitive << ( index_min_reg_77 );

    SC_METHOD(thread_index_min_2_fu_158_p2);
    sensitive << ( j_0_in_i_reg_108 );

    SC_METHOD(thread_index_min_cast1_fu_137_p1);
    sensitive << ( index_min_reg_77 );

    SC_METHOD(thread_j_i_index_min1_i_fu_186_p3);
    sensitive << ( index_min_2_reg_234 );
    sensitive << ( index_min1_i_reg_88 );
    sensitive << ( tmp_4_i_fu_180_p2 );

    SC_METHOD(thread_min_i_min1_i_fu_193_p3);
    sensitive << ( A_q0 );
    sensitive << ( min1_i_reg_98 );
    sensitive << ( tmp_4_i_fu_180_p2 );

    SC_METHOD(thread_operation_V_load_load_fu_128_p1);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( operation_V );

    SC_METHOD(thread_tmp_1_i_fu_175_p1);
    sensitive << ( index_min1_i_reg_88 );

    SC_METHOD(thread_tmp_3_i_fu_170_p1);
    sensitive << ( index_min_2_fu_158_p2 );

    SC_METHOD(thread_tmp_4_i_fu_180_p2);
    sensitive << ( A_q0 );
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( min1_i_reg_98 );

    SC_METHOD(thread_tmp_fu_132_p1);
    sensitive << ( indexOutputData );

    SC_METHOD(thread_tmp_i_fu_153_p1);
    sensitive << ( index_min_reg_77 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( operation_V_load_load_fu_128_p1 );
    sensitive << ( exitcond1_i_fu_141_p2 );
    sensitive << ( exitcond_i_fu_164_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "selectionSort_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, indexOutputData, "(port)indexOutputData");
    sc_trace(mVcdFile, operation_V, "(port)operation_V");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_we0, "(port)A_we0");
    sc_trace(mVcdFile, A_d0, "(port)A_d0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_24, "ap_sig_24");
    sc_trace(mVcdFile, operation_V_load_load_fu_128_p1, "operation_V_load_load_fu_128_p1");
    sc_trace(mVcdFile, index_min_cast1_fu_137_p1, "index_min_cast1_fu_137_p1");
    sc_trace(mVcdFile, index_min_cast1_reg_209, "index_min_cast1_reg_209");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_59, "ap_sig_59");
    sc_trace(mVcdFile, i_fu_147_p2, "i_fu_147_p2");
    sc_trace(mVcdFile, i_reg_218, "i_reg_218");
    sc_trace(mVcdFile, A_addr_1_reg_223, "A_addr_1_reg_223");
    sc_trace(mVcdFile, exitcond1_i_fu_141_p2, "exitcond1_i_fu_141_p2");
    sc_trace(mVcdFile, min_2_reg_228, "min_2_reg_228");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_74, "ap_sig_74");
    sc_trace(mVcdFile, index_min_2_fu_158_p2, "index_min_2_fu_158_p2");
    sc_trace(mVcdFile, index_min_2_reg_234, "index_min_2_reg_234");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_83, "ap_sig_83");
    sc_trace(mVcdFile, exitcond_i_fu_164_p2, "exitcond_i_fu_164_p2");
    sc_trace(mVcdFile, A_addr_2_reg_248, "A_addr_2_reg_248");
    sc_trace(mVcdFile, j_i_index_min1_i_fu_186_p3, "j_i_index_min1_i_fu_186_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_101, "ap_sig_101");
    sc_trace(mVcdFile, min_i_min1_i_fu_193_p3, "min_i_min1_i_fu_193_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_111, "ap_sig_111");
    sc_trace(mVcdFile, index_min_reg_77, "index_min_reg_77");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_120, "ap_sig_120");
    sc_trace(mVcdFile, index_min1_i_reg_88, "index_min1_i_reg_88");
    sc_trace(mVcdFile, min1_i_reg_98, "min1_i_reg_98");
    sc_trace(mVcdFile, j_0_in_i_reg_108, "j_0_in_i_reg_108");
    sc_trace(mVcdFile, p_0_reg_117, "p_0_reg_117");
    sc_trace(mVcdFile, tmp_fu_132_p1, "tmp_fu_132_p1");
    sc_trace(mVcdFile, tmp_i_fu_153_p1, "tmp_i_fu_153_p1");
    sc_trace(mVcdFile, tmp_3_i_fu_170_p1, "tmp_3_i_fu_170_p1");
    sc_trace(mVcdFile, tmp_1_i_fu_175_p1, "tmp_1_i_fu_175_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_149, "ap_sig_149");
    sc_trace(mVcdFile, tmp_4_i_fu_180_p2, "tmp_4_i_fu_180_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_197, "ap_sig_197");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("selectionSort.hdltvin.dat");
    mHdltvoutHandle.open("selectionSort.hdltvout.dat");
}

selectionSort::~selectionSort() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void selectionSort::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        index_min1_i_reg_88 = j_i_index_min1_i_fu_186_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        index_min1_i_reg_88 = index_min_cast1_reg_209.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(operation_V_load_load_fu_128_p1.read(), ap_const_lv1_0))) {
        index_min_reg_77 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        index_min_reg_77 = i_reg_218.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        j_0_in_i_reg_108 = index_min_2_reg_234.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_0_in_i_reg_108 = index_min_cast1_reg_209.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        min1_i_reg_98 = min_i_min1_i_fu_193_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        min1_i_reg_98 = A_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_141_p2.read()))) {
        p_0_reg_117 = ap_const_lv16_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        p_0_reg_117 = A_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_141_p2.read()))) {
        A_addr_1_reg_223 =  (sc_lv<8>) (tmp_i_fu_153_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_164_p2.read()))) {
        A_addr_2_reg_248 =  (sc_lv<8>) (tmp_1_i_fu_175_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        i_reg_218 = i_fu_147_p2.read();
        index_min_cast1_reg_209 = index_min_cast1_fu_137_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        index_min_2_reg_234 = index_min_2_fu_158_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        min_2_reg_228 = A_q0.read();
    }
}

void selectionSort::thread_A_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        A_address0 = A_addr_2_reg_248.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        A_address0 = A_addr_1_reg_223.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_164_p2.read()))) {
        A_address0 =  (sc_lv<8>) (tmp_1_i_fu_175_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_164_p2.read()))) {
        A_address0 =  (sc_lv<8>) (tmp_3_i_fu_170_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        A_address0 =  (sc_lv<8>) (tmp_i_fu_153_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        A_address0 =  (sc_lv<8>) (tmp_fu_132_p1.read());
    } else {
        A_address0 = "XXXXXXXX";
    }
}

void selectionSort::thread_A_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_164_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_164_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()))) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void selectionSort::thread_A_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        A_d0 = min_2_reg_228.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        A_d0 = A_q0.read();
    } else {
        A_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void selectionSort::thread_A_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()))) {
        A_we0 = ap_const_logic_1;
    } else {
        A_we0 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_return() {
    ap_return = p_0_reg_117.read();
}

void selectionSort::thread_ap_sig_101() {
    ap_sig_101 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void selectionSort::thread_ap_sig_111() {
    ap_sig_111 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void selectionSort::thread_ap_sig_120() {
    ap_sig_120 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void selectionSort::thread_ap_sig_149() {
    ap_sig_149 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void selectionSort::thread_ap_sig_197() {
    ap_sig_197 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void selectionSort::thread_ap_sig_24() {
    ap_sig_24 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void selectionSort::thread_ap_sig_59() {
    ap_sig_59 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void selectionSort::thread_ap_sig_74() {
    ap_sig_74 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void selectionSort::thread_ap_sig_83() {
    ap_sig_83 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void selectionSort::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_24.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_59.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_74.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_83.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_101.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_149.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_120.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_111.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_197.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void selectionSort::thread_exitcond1_i_fu_141_p2() {
    exitcond1_i_fu_141_p2 = (!index_min_reg_77.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(index_min_reg_77.read() == ap_const_lv8_FF);
}

void selectionSort::thread_exitcond_i_fu_164_p2() {
    exitcond_i_fu_164_p2 = (!j_0_in_i_reg_108.read().is_01() || !ap_const_lv16_FF.is_01())? sc_lv<1>(): sc_lv<1>(j_0_in_i_reg_108.read() == ap_const_lv16_FF);
}

void selectionSort::thread_i_fu_147_p2() {
    i_fu_147_p2 = (!index_min_reg_77.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(index_min_reg_77.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void selectionSort::thread_index_min_2_fu_158_p2() {
    index_min_2_fu_158_p2 = (!j_0_in_i_reg_108.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(j_0_in_i_reg_108.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void selectionSort::thread_index_min_cast1_fu_137_p1() {
    index_min_cast1_fu_137_p1 = esl_zext<16,8>(index_min_reg_77.read());
}

void selectionSort::thread_j_i_index_min1_i_fu_186_p3() {
    j_i_index_min1_i_fu_186_p3 = (!tmp_4_i_fu_180_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_4_i_fu_180_p2.read()[0].to_bool())? index_min_2_reg_234.read(): index_min1_i_reg_88.read());
}

void selectionSort::thread_min_i_min1_i_fu_193_p3() {
    min_i_min1_i_fu_193_p3 = (!tmp_4_i_fu_180_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_4_i_fu_180_p2.read()[0].to_bool())? A_q0.read(): min1_i_reg_98.read());
}

void selectionSort::thread_operation_V_load_load_fu_128_p1() {
    operation_V_load_load_fu_128_p1 = operation_V.read();
}

void selectionSort::thread_tmp_1_i_fu_175_p1() {
    tmp_1_i_fu_175_p1 = esl_sext<64,16>(index_min1_i_reg_88.read());
}

void selectionSort::thread_tmp_3_i_fu_170_p1() {
    tmp_3_i_fu_170_p1 = esl_sext<64,16>(index_min_2_fu_158_p2.read());
}

void selectionSort::thread_tmp_4_i_fu_180_p2() {
    tmp_4_i_fu_180_p2 = (!A_q0.read().is_01() || !min1_i_reg_98.read().is_01())? sc_lv<1>(): (sc_bigint<16>(A_q0.read()) < sc_bigint<16>(min1_i_reg_98.read()));
}

void selectionSort::thread_tmp_fu_132_p1() {
    tmp_fu_132_p1 = esl_sext<64,8>(indexOutputData.read());
}

void selectionSort::thread_tmp_i_fu_153_p1() {
    tmp_i_fu_153_p1 = esl_zext<64,8>(index_min_reg_77.read());
}

void selectionSort::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(operation_V_load_load_fu_128_p1.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,1,1>(operation_V_load_load_fu_128_p1.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_141_p2.read())) {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_164_p2.read())) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

void selectionSort::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"indexOutputData\" :  \"" << indexOutputData.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"operation_V\" :  \"" << operation_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_we0\" :  \"" << A_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_d0\" :  \"" << A_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

