// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _selectionSort_HH_
#define _selectionSort_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct selectionSort : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > indexOutputData;
    sc_in< sc_lv<1> > operation_V;
    sc_out< sc_lv<8> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_out< sc_logic > A_we0;
    sc_out< sc_lv<16> > A_d0;
    sc_in< sc_lv<16> > A_q0;
    sc_out< sc_lv<16> > ap_return;


    // Module declarations
    selectionSort(sc_module_name name);
    SC_HAS_PROCESS(selectionSort);

    ~selectionSort();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_24;
    sc_signal< sc_lv<1> > operation_V_load_load_fu_128_p1;
    sc_signal< sc_lv<16> > index_min_cast1_fu_137_p1;
    sc_signal< sc_lv<16> > index_min_cast1_reg_209;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_59;
    sc_signal< sc_lv<8> > i_fu_147_p2;
    sc_signal< sc_lv<8> > i_reg_218;
    sc_signal< sc_lv<8> > A_addr_1_reg_223;
    sc_signal< sc_lv<1> > exitcond1_i_fu_141_p2;
    sc_signal< sc_lv<16> > min_2_reg_228;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_74;
    sc_signal< sc_lv<16> > index_min_2_fu_158_p2;
    sc_signal< sc_lv<16> > index_min_2_reg_234;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_83;
    sc_signal< sc_lv<1> > exitcond_i_fu_164_p2;
    sc_signal< sc_lv<8> > A_addr_2_reg_248;
    sc_signal< sc_lv<16> > j_i_index_min1_i_fu_186_p3;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_101;
    sc_signal< sc_lv<16> > min_i_min1_i_fu_193_p3;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_7;
    sc_signal< bool > ap_sig_111;
    sc_signal< sc_lv<8> > index_min_reg_77;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_120;
    sc_signal< sc_lv<16> > index_min1_i_reg_88;
    sc_signal< sc_lv<16> > min1_i_reg_98;
    sc_signal< sc_lv<16> > j_0_in_i_reg_108;
    sc_signal< sc_lv<16> > p_0_reg_117;
    sc_signal< sc_lv<64> > tmp_fu_132_p1;
    sc_signal< sc_lv<64> > tmp_i_fu_153_p1;
    sc_signal< sc_lv<64> > tmp_3_i_fu_170_p1;
    sc_signal< sc_lv<64> > tmp_1_i_fu_175_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_149;
    sc_signal< sc_lv<1> > tmp_4_i_fu_180_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st9_fsm_8;
    sc_signal< bool > ap_sig_197;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_st1_fsm_0;
    static const sc_lv<9> ap_ST_st2_fsm_1;
    static const sc_lv<9> ap_ST_st3_fsm_2;
    static const sc_lv<9> ap_ST_st4_fsm_3;
    static const sc_lv<9> ap_ST_st5_fsm_4;
    static const sc_lv<9> ap_ST_st6_fsm_5;
    static const sc_lv<9> ap_ST_st7_fsm_6;
    static const sc_lv<9> ap_ST_st8_fsm_7;
    static const sc_lv<9> ap_ST_st9_fsm_8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<16> ap_const_lv16_FF;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_A_d0();
    void thread_A_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sig_101();
    void thread_ap_sig_111();
    void thread_ap_sig_120();
    void thread_ap_sig_149();
    void thread_ap_sig_197();
    void thread_ap_sig_24();
    void thread_ap_sig_59();
    void thread_ap_sig_74();
    void thread_ap_sig_83();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_cseq_ST_st8_fsm_7();
    void thread_ap_sig_cseq_ST_st9_fsm_8();
    void thread_exitcond1_i_fu_141_p2();
    void thread_exitcond_i_fu_164_p2();
    void thread_i_fu_147_p2();
    void thread_index_min_2_fu_158_p2();
    void thread_index_min_cast1_fu_137_p1();
    void thread_j_i_index_min1_i_fu_186_p3();
    void thread_min_i_min1_i_fu_193_p3();
    void thread_operation_V_load_load_fu_128_p1();
    void thread_tmp_1_i_fu_175_p1();
    void thread_tmp_3_i_fu_170_p1();
    void thread_tmp_4_i_fu_180_p2();
    void thread_tmp_fu_132_p1();
    void thread_tmp_i_fu_153_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
