-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity selectionSort is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dataIn : IN STD_LOGIC_VECTOR (15 downto 0);
    posOutData : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of selectionSort is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "selectionSort,hls_ip_2016_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.011000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=211,HLS_SYN_LUT=353}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_24 : BOOLEAN;
    signal count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_we0 : STD_LOGIC;
    signal A_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal flagFill : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal reg_166 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_53 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_60 : BOOLEAN;
    signal flagFill_load_load_fu_192_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal flagFill_load_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_cast1_fu_213_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_cast1_reg_335 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_80 : BOOLEAN;
    signal i_fu_223_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_343 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_1_reg_348 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_i_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_min_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_271_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_reg_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_109 : BOOLEAN;
    signal exitcond_i_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_addr_2_reg_382 : STD_LOGIC_VECTOR (7 downto 0);
    signal min_1_i_min1_i_fu_306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_127 : BOOLEAN;
    signal index_min_1_i_index_min1_i_fu_314_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_i_reg_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_138 : BOOLEAN;
    signal min1_i_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_in_i_reg_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_min1_i_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_155 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_fu_254_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_i_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_178 : BOOLEAN;
    signal tmp_fu_176_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal mem_index_gep5_cast_fu_240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal adjSize_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal min_1_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_5_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_min_1_fu_303_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_266 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component selectionSort_A IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    A_U : component selectionSort_A
    generic map (
        DataWidth => 16,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_address0,
        ce0 => A_ce0,
        we0 => A_we0,
        d0 => A_d0,
        q0 => A_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_i_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = icmp_fu_186_p2) and (ap_const_lv1_0 = flagFill_load_load_fu_192_p1))) then 
                i_i_reg_114 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_i_reg_114 <= i_reg_343;
            end if; 
        end if;
    end process;

    index_min1_i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                index_min1_i_reg_145 <= index_min_1_i_index_min1_i_fu_314_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                index_min1_i_reg_145 <= index_min_fu_267_p1;
            end if; 
        end if;
    end process;

    j_0_in_i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_0_in_i_reg_136 <= j_reg_368;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                j_0_in_i_reg_136 <= i_i_cast1_reg_335;
            end if; 
        end if;
    end process;

    min1_i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                min1_i_reg_126 <= min_1_i_min1_i_fu_306_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                min1_i_reg_126 <= min_fu_263_p1;
            end if; 
        end if;
    end process;

    p_0_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                p_0_reg_155 <= A_q0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = icmp_fu_186_p2)))) then 
                p_0_reg_155 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = flagFill_load_reg_331) and (ap_const_lv1_0 = exitcond1_i_fu_217_p2))) then
                A_addr_1_reg_348 <= tmp_i_fu_229_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_i_fu_277_p2)))) then
                A_addr_2_reg_382 <= tmp_7_i_fu_288_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = icmp_fu_186_p2)))) then
                count <= tmp_2_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = flagFill_load_reg_331) and not((ap_const_lv1_0 = exitcond1_i_fu_217_p2)))) then
                flagFill <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = icmp_fu_186_p2))) then
                flagFill_load_reg_331 <= flagFill;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = flagFill_load_reg_331))) then
                    i_i_cast1_reg_335(7 downto 0) <= i_i_cast1_fu_213_p1(7 downto 0);
                i_reg_343 <= i_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_reg_368 <= j_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then
                reg_166 <= A_q0;
            end if;
        end if;
    end process;
    i_i_cast1_reg_335(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, flagFill_load_reg_331, icmp_fu_186_p2, exitcond1_i_fu_217_p2, exitcond_i_fu_277_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if ((not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = icmp_fu_186_p2)))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                elsif ((not((ap_start = ap_const_logic_0)) and (ap_const_lv1_0 = icmp_fu_186_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((ap_const_lv1_0 = flagFill_load_reg_331)) or not((ap_const_lv1_0 = exitcond1_i_fu_217_p2)))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_277_p2))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, flagFill_load_reg_331, ap_sig_cseq_ST_st2_fsm_1, A_addr_1_reg_348, exitcond1_i_fu_217_p2, ap_sig_cseq_ST_st4_fsm_3, exitcond_i_fu_277_p2, A_addr_2_reg_382, ap_sig_cseq_ST_st7_fsm_6, tmp_1_fu_196_p1, tmp_i_fu_229_p1, gepindex2_fu_254_p3, tmp_9_i_fu_283_p1, tmp_7_i_fu_288_p1, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            A_address0 <= A_addr_2_reg_382;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            A_address0 <= A_addr_1_reg_348;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            A_address0 <= tmp_1_fu_196_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_i_fu_277_p2)))) then 
            A_address0 <= tmp_7_i_fu_288_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_i_fu_277_p2))) then 
            A_address0 <= tmp_9_i_fu_283_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (not((ap_const_lv1_0 = flagFill_load_reg_331)) or not((ap_const_lv1_0 = exitcond1_i_fu_217_p2))))) then 
            A_address0 <= gepindex2_fu_254_p3(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = flagFill_load_reg_331) and (ap_const_lv1_0 = exitcond1_i_fu_217_p2))) then 
            A_address0 <= tmp_i_fu_229_p1(8 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, flagFill_load_reg_331, ap_sig_cseq_ST_st2_fsm_1, exitcond1_i_fu_217_p2, ap_sig_cseq_ST_st4_fsm_3, exitcond_i_fu_277_p2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = flagFill_load_reg_331) and (ap_const_lv1_0 = exitcond1_i_fu_217_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (not((ap_const_lv1_0 = flagFill_load_reg_331)) or not((ap_const_lv1_0 = exitcond1_i_fu_217_p2)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_i_fu_277_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_i_fu_277_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_d0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, dataIn, A_q0, reg_166, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            A_d0 <= reg_166;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            A_d0 <= A_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            A_d0 <= dataIn;
        else 
            A_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_we0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, icmp_fu_186_p2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = icmp_fu_186_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    adjSize_fu_243_p1 <= std_logic_vector(resize(unsigned(mem_index_gep5_cast_fu_240_p1),64));

    ap_done_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_0_reg_155;

    ap_sig_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_109 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_127_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_127 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_138 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_178 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_266_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_266 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_53_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_53 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_60 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_80 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_24)
    begin
        if (ap_sig_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_80)
    begin
        if (ap_sig_80) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_53)
    begin
        if (ap_sig_53) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_109)
    begin
        if (ap_sig_109) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_127)
    begin
        if (ap_sig_127) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_178)
    begin
        if (ap_sig_178) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_138)
    begin
        if (ap_sig_138) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_60)
    begin
        if (ap_sig_60) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_266)
    begin
        if (ap_sig_266) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_217_p2 <= "1" when (i_i_reg_114 = ap_const_lv8_FF) else "0";
    exitcond_i_fu_277_p2 <= "1" when (j_0_in_i_reg_136 = ap_const_lv16_FF) else "0";
    flagFill_load_load_fu_192_p1 <= flagFill;
    gepindex2_fu_254_p3 <= 
        ap_const_lv64_FF when (tmp_3_fu_247_p3(0) = '1') else 
        adjSize_fu_243_p1;
    i_fu_223_p2 <= std_logic_vector(unsigned(i_i_reg_114) + unsigned(ap_const_lv8_1));
    i_i_cast1_fu_213_p1 <= std_logic_vector(resize(unsigned(i_i_reg_114),16));
    icmp_fu_186_p2 <= "1" when (signed(tmp_fu_176_p4) < signed(ap_const_lv24_1)) else "0";
        index_min_1_fu_303_p1 <= std_logic_vector(resize(signed(j_reg_368),32));

    index_min_1_i_index_min1_i_fu_314_p3 <= 
        index_min_1_fu_303_p1 when (tmp_i_5_fu_297_p2(0) = '1') else 
        index_min1_i_reg_145;
    index_min_fu_267_p1 <= std_logic_vector(resize(unsigned(i_i_reg_114),32));
    j_fu_271_p2 <= std_logic_vector(unsigned(j_0_in_i_reg_136) + unsigned(ap_const_lv16_1));
        mem_index_gep5_cast_fu_240_p1 <= std_logic_vector(resize(signed(posOutData),11));

        min_1_fu_293_p1 <= std_logic_vector(resize(signed(A_q0),32));

    min_1_i_min1_i_fu_306_p3 <= 
        min_1_fu_293_p1 when (tmp_i_5_fu_297_p2(0) = '1') else 
        min1_i_reg_126;
        min_fu_263_p1 <= std_logic_vector(resize(signed(A_q0),32));

        tmp_1_fu_196_p1 <= std_logic_vector(resize(signed(count),64));

    tmp_2_fu_201_p2 <= std_logic_vector(unsigned(count) + unsigned(ap_const_lv32_1));
    tmp_3_fu_247_p3 <= posOutData(7 downto 7);
    tmp_7_i_fu_288_p1 <= std_logic_vector(resize(unsigned(index_min1_i_reg_145),64));
        tmp_9_i_fu_283_p1 <= std_logic_vector(resize(signed(j_fu_271_p2),64));

    tmp_fu_176_p4 <= count(31 downto 8);
    tmp_i_5_fu_297_p2 <= "1" when (unsigned(min_1_fu_293_p1) < unsigned(min1_i_reg_126)) else "0";
    tmp_i_fu_229_p1 <= std_logic_vector(resize(unsigned(i_i_reg_114),64));
end behav;
