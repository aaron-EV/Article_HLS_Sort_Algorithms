// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "selectionSort.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic selectionSort::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic selectionSort::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> selectionSort::ap_ST_st1_fsm_0 = "1";
const sc_lv<9> selectionSort::ap_ST_st2_fsm_1 = "10";
const sc_lv<9> selectionSort::ap_ST_st3_fsm_2 = "100";
const sc_lv<9> selectionSort::ap_ST_st4_fsm_3 = "1000";
const sc_lv<9> selectionSort::ap_ST_st5_fsm_4 = "10000";
const sc_lv<9> selectionSort::ap_ST_st6_fsm_5 = "100000";
const sc_lv<9> selectionSort::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<9> selectionSort::ap_ST_st8_fsm_7 = "10000000";
const sc_lv<9> selectionSort::ap_ST_st9_fsm_8 = "100000000";
const sc_lv<32> selectionSort::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> selectionSort::ap_const_lv1_1 = "1";
const sc_lv<1> selectionSort::ap_const_lv1_0 = "0";
const sc_lv<32> selectionSort::ap_const_lv32_2 = "10";
const sc_lv<32> selectionSort::ap_const_lv32_7 = "111";
const sc_lv<32> selectionSort::ap_const_lv32_1 = "1";
const sc_lv<32> selectionSort::ap_const_lv32_3 = "11";
const sc_lv<32> selectionSort::ap_const_lv32_4 = "100";
const sc_lv<32> selectionSort::ap_const_lv32_6 = "110";
const sc_lv<8> selectionSort::ap_const_lv8_0 = "00000000";
const sc_lv<16> selectionSort::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> selectionSort::ap_const_lv32_5 = "101";
const sc_lv<32> selectionSort::ap_const_lv32_8 = "1000";
const sc_lv<32> selectionSort::ap_const_lv32_1F = "11111";
const sc_lv<24> selectionSort::ap_const_lv24_1 = "1";
const sc_lv<8> selectionSort::ap_const_lv8_FF = "11111111";
const sc_lv<8> selectionSort::ap_const_lv8_1 = "1";
const sc_lv<64> selectionSort::ap_const_lv64_FF = "11111111";
const sc_lv<16> selectionSort::ap_const_lv16_1 = "1";
const sc_lv<16> selectionSort::ap_const_lv16_FF = "11111111";

selectionSort::selectionSort(sc_module_name name) : sc_module(name), mVcdFile(0) {
    A_U = new selectionSort_A("A_U");
    A_U->clk(ap_clk);
    A_U->reset(ap_rst);
    A_U->address0(A_address0);
    A_U->ce0(A_ce0);
    A_U->we0(A_we0);
    A_U->d0(A_d0);
    A_U->q0(A_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( flagFill_load_reg_331 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( A_addr_1_reg_348 );
    sensitive << ( exitcond1_i_fu_217_p2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond_i_fu_277_p2 );
    sensitive << ( A_addr_2_reg_382 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_1_fu_196_p1 );
    sensitive << ( tmp_i_fu_229_p1 );
    sensitive << ( gepindex2_fu_254_p3 );
    sensitive << ( tmp_9_i_fu_283_p1 );
    sensitive << ( tmp_7_i_fu_288_p1 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( flagFill_load_reg_331 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond1_i_fu_217_p2 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( exitcond_i_fu_277_p2 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_A_d0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( dataIn );
    sensitive << ( A_q0 );
    sensitive << ( reg_166 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_A_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( icmp_fu_186_p2 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );

    SC_METHOD(thread_adjSize_fu_243_p1);
    sensitive << ( mem_index_gep5_cast_fu_240_p1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_0_reg_155 );
    sensitive << ( ap_sig_cseq_ST_st9_fsm_8 );

    SC_METHOD(thread_ap_sig_109);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_127);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_138);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_178);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_266);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_60);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_80);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_24 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_80 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_53 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_109 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_127 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_178 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_138 );

    SC_METHOD(thread_ap_sig_cseq_ST_st8_fsm_7);
    sensitive << ( ap_sig_60 );

    SC_METHOD(thread_ap_sig_cseq_ST_st9_fsm_8);
    sensitive << ( ap_sig_266 );

    SC_METHOD(thread_exitcond1_i_fu_217_p2);
    sensitive << ( flagFill_load_reg_331 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( i_i_reg_114 );

    SC_METHOD(thread_exitcond_i_fu_277_p2);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( j_0_in_i_reg_136 );

    SC_METHOD(thread_flagFill_load_load_fu_192_p1);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( flagFill );
    sensitive << ( icmp_fu_186_p2 );

    SC_METHOD(thread_gepindex2_fu_254_p3);
    sensitive << ( tmp_3_fu_247_p3 );
    sensitive << ( adjSize_fu_243_p1 );

    SC_METHOD(thread_i_fu_223_p2);
    sensitive << ( i_i_reg_114 );

    SC_METHOD(thread_i_i_cast1_fu_213_p1);
    sensitive << ( i_i_reg_114 );

    SC_METHOD(thread_icmp_fu_186_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( tmp_fu_176_p4 );

    SC_METHOD(thread_index_min_1_fu_303_p1);
    sensitive << ( j_reg_368 );

    SC_METHOD(thread_index_min_1_i_index_min1_i_fu_314_p3);
    sensitive << ( index_min1_i_reg_145 );
    sensitive << ( tmp_i_5_fu_297_p2 );
    sensitive << ( index_min_1_fu_303_p1 );

    SC_METHOD(thread_index_min_fu_267_p1);
    sensitive << ( i_i_reg_114 );

    SC_METHOD(thread_j_fu_271_p2);
    sensitive << ( j_0_in_i_reg_136 );

    SC_METHOD(thread_mem_index_gep5_cast_fu_240_p1);
    sensitive << ( posOutData );

    SC_METHOD(thread_min_1_fu_293_p1);
    sensitive << ( A_q0 );

    SC_METHOD(thread_min_1_i_min1_i_fu_306_p3);
    sensitive << ( min1_i_reg_126 );
    sensitive << ( min_1_fu_293_p1 );
    sensitive << ( tmp_i_5_fu_297_p2 );

    SC_METHOD(thread_min_fu_263_p1);
    sensitive << ( A_q0 );

    SC_METHOD(thread_tmp_1_fu_196_p1);
    sensitive << ( count );

    SC_METHOD(thread_tmp_2_fu_201_p2);
    sensitive << ( count );

    SC_METHOD(thread_tmp_3_fu_247_p3);
    sensitive << ( posOutData );

    SC_METHOD(thread_tmp_7_i_fu_288_p1);
    sensitive << ( index_min1_i_reg_145 );

    SC_METHOD(thread_tmp_9_i_fu_283_p1);
    sensitive << ( j_fu_271_p2 );

    SC_METHOD(thread_tmp_fu_176_p4);
    sensitive << ( count );

    SC_METHOD(thread_tmp_i_5_fu_297_p2);
    sensitive << ( ap_sig_cseq_ST_st5_fsm_4 );
    sensitive << ( min1_i_reg_126 );
    sensitive << ( min_1_fu_293_p1 );

    SC_METHOD(thread_tmp_i_fu_229_p1);
    sensitive << ( i_i_reg_114 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( flagFill_load_reg_331 );
    sensitive << ( icmp_fu_186_p2 );
    sensitive << ( exitcond1_i_fu_217_p2 );
    sensitive << ( exitcond_i_fu_277_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000001";
    count = "00000000000000000000000000000000";
    flagFill = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "selectionSort_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dataIn, "(port)dataIn");
    sc_trace(mVcdFile, posOutData, "(port)posOutData");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_24, "ap_sig_24");
    sc_trace(mVcdFile, count, "count");
    sc_trace(mVcdFile, A_address0, "A_address0");
    sc_trace(mVcdFile, A_ce0, "A_ce0");
    sc_trace(mVcdFile, A_we0, "A_we0");
    sc_trace(mVcdFile, A_d0, "A_d0");
    sc_trace(mVcdFile, A_q0, "A_q0");
    sc_trace(mVcdFile, flagFill, "flagFill");
    sc_trace(mVcdFile, reg_166, "reg_166");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_53, "ap_sig_53");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st8_fsm_7, "ap_sig_cseq_ST_st8_fsm_7");
    sc_trace(mVcdFile, ap_sig_60, "ap_sig_60");
    sc_trace(mVcdFile, flagFill_load_load_fu_192_p1, "flagFill_load_load_fu_192_p1");
    sc_trace(mVcdFile, flagFill_load_reg_331, "flagFill_load_reg_331");
    sc_trace(mVcdFile, icmp_fu_186_p2, "icmp_fu_186_p2");
    sc_trace(mVcdFile, i_i_cast1_fu_213_p1, "i_i_cast1_fu_213_p1");
    sc_trace(mVcdFile, i_i_cast1_reg_335, "i_i_cast1_reg_335");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_80, "ap_sig_80");
    sc_trace(mVcdFile, i_fu_223_p2, "i_fu_223_p2");
    sc_trace(mVcdFile, i_reg_343, "i_reg_343");
    sc_trace(mVcdFile, A_addr_1_reg_348, "A_addr_1_reg_348");
    sc_trace(mVcdFile, exitcond1_i_fu_217_p2, "exitcond1_i_fu_217_p2");
    sc_trace(mVcdFile, min_fu_263_p1, "min_fu_263_p1");
    sc_trace(mVcdFile, index_min_fu_267_p1, "index_min_fu_267_p1");
    sc_trace(mVcdFile, j_fu_271_p2, "j_fu_271_p2");
    sc_trace(mVcdFile, j_reg_368, "j_reg_368");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_109, "ap_sig_109");
    sc_trace(mVcdFile, exitcond_i_fu_277_p2, "exitcond_i_fu_277_p2");
    sc_trace(mVcdFile, A_addr_2_reg_382, "A_addr_2_reg_382");
    sc_trace(mVcdFile, min_1_i_min1_i_fu_306_p3, "min_1_i_min1_i_fu_306_p3");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_127, "ap_sig_127");
    sc_trace(mVcdFile, index_min_1_i_index_min1_i_fu_314_p3, "index_min_1_i_index_min1_i_fu_314_p3");
    sc_trace(mVcdFile, i_i_reg_114, "i_i_reg_114");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_138, "ap_sig_138");
    sc_trace(mVcdFile, min1_i_reg_126, "min1_i_reg_126");
    sc_trace(mVcdFile, j_0_in_i_reg_136, "j_0_in_i_reg_136");
    sc_trace(mVcdFile, index_min1_i_reg_145, "index_min1_i_reg_145");
    sc_trace(mVcdFile, p_0_reg_155, "p_0_reg_155");
    sc_trace(mVcdFile, tmp_1_fu_196_p1, "tmp_1_fu_196_p1");
    sc_trace(mVcdFile, tmp_i_fu_229_p1, "tmp_i_fu_229_p1");
    sc_trace(mVcdFile, gepindex2_fu_254_p3, "gepindex2_fu_254_p3");
    sc_trace(mVcdFile, tmp_9_i_fu_283_p1, "tmp_9_i_fu_283_p1");
    sc_trace(mVcdFile, tmp_7_i_fu_288_p1, "tmp_7_i_fu_288_p1");
    sc_trace(mVcdFile, tmp_2_fu_201_p2, "tmp_2_fu_201_p2");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_178, "ap_sig_178");
    sc_trace(mVcdFile, tmp_fu_176_p4, "tmp_fu_176_p4");
    sc_trace(mVcdFile, mem_index_gep5_cast_fu_240_p1, "mem_index_gep5_cast_fu_240_p1");
    sc_trace(mVcdFile, tmp_3_fu_247_p3, "tmp_3_fu_247_p3");
    sc_trace(mVcdFile, adjSize_fu_243_p1, "adjSize_fu_243_p1");
    sc_trace(mVcdFile, min_1_fu_293_p1, "min_1_fu_293_p1");
    sc_trace(mVcdFile, tmp_i_5_fu_297_p2, "tmp_i_5_fu_297_p2");
    sc_trace(mVcdFile, index_min_1_fu_303_p1, "index_min_1_fu_303_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st9_fsm_8, "ap_sig_cseq_ST_st9_fsm_8");
    sc_trace(mVcdFile, ap_sig_266, "ap_sig_266");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("selectionSort.hdltvin.dat");
    mHdltvoutHandle.open("selectionSort.hdltvout.dat");
}

selectionSort::~selectionSort() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete A_U;
}

void selectionSort::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_186_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, flagFill_load_load_fu_192_p1.read()))) {
        i_i_reg_114 = ap_const_lv8_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        i_i_reg_114 = i_reg_343.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        index_min1_i_reg_145 = index_min_1_i_index_min1_i_fu_314_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        index_min1_i_reg_145 = index_min_fu_267_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        j_0_in_i_reg_136 = j_reg_368.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        j_0_in_i_reg_136 = i_i_cast1_reg_335.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        min1_i_reg_126 = min_1_i_min1_i_fu_306_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        min1_i_reg_126 = min_fu_263_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read())) {
        p_0_reg_155 = A_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_186_p2.read()))) {
        p_0_reg_155 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, flagFill_load_reg_331.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_217_p2.read()))) {
        A_addr_1_reg_348 =  (sc_lv<8>) (tmp_i_fu_229_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_277_p2.read()))) {
        A_addr_2_reg_382 =  (sc_lv<8>) (tmp_7_i_fu_288_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_186_p2.read()))) {
        count = tmp_2_fu_201_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, flagFill_load_reg_331.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_217_p2.read()))) {
        flagFill = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_186_p2.read()))) {
        flagFill_load_reg_331 = flagFill.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, flagFill_load_reg_331.read()))) {
        i_i_cast1_reg_335 = i_i_cast1_fu_213_p1.read();
        i_reg_343 = i_fu_223_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        j_reg_368 = j_fu_271_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st8_fsm_7.read()))) {
        reg_166 = A_q0.read();
    }
}

void selectionSort::thread_A_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        A_address0 = A_addr_2_reg_382.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        A_address0 = A_addr_1_reg_348.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        A_address0 =  (sc_lv<8>) (tmp_1_fu_196_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_277_p2.read()))) {
        A_address0 =  (sc_lv<8>) (tmp_7_i_fu_288_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_277_p2.read()))) {
        A_address0 =  (sc_lv<8>) (tmp_9_i_fu_283_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                (!esl_seteq<1,1,1>(ap_const_lv1_0, flagFill_load_reg_331.read()) || 
                 !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_217_p2.read())))) {
        A_address0 =  (sc_lv<8>) (gepindex2_fu_254_p3.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, flagFill_load_reg_331.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_217_p2.read()))) {
        A_address0 =  (sc_lv<8>) (tmp_i_fu_229_p1.read());
    } else {
        A_address0 = "XXXXXXXX";
    }
}

void selectionSort::thread_A_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, flagFill_load_reg_331.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_217_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          (!esl_seteq<1,1,1>(ap_const_lv1_0, flagFill_load_reg_331.read()) || 
           !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_217_p2.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_277_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_277_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()))) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void selectionSort::thread_A_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        A_d0 = reg_166.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read())) {
        A_d0 = A_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        A_d0 = dataIn.read();
    } else {
        A_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void selectionSort::thread_A_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_186_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()))) {
        A_we0 = ap_const_logic_1;
    } else {
        A_we0 = ap_const_logic_0;
    }
}

void selectionSort::thread_adjSize_fu_243_p1() {
    adjSize_fu_243_p1 = esl_zext<64,11>(mem_index_gep5_cast_fu_240_p1.read());
}

void selectionSort::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st9_fsm_8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_return() {
    ap_return = p_0_reg_155.read();
}

void selectionSort::thread_ap_sig_109() {
    ap_sig_109 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void selectionSort::thread_ap_sig_127() {
    ap_sig_127 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void selectionSort::thread_ap_sig_138() {
    ap_sig_138 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void selectionSort::thread_ap_sig_178() {
    ap_sig_178 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void selectionSort::thread_ap_sig_24() {
    ap_sig_24 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void selectionSort::thread_ap_sig_266() {
    ap_sig_266 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(8, 8));
}

void selectionSort::thread_ap_sig_53() {
    ap_sig_53 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void selectionSort::thread_ap_sig_60() {
    ap_sig_60 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(7, 7));
}

void selectionSort::thread_ap_sig_80() {
    ap_sig_80 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void selectionSort::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_24.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_80.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_53.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_109.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_127.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_178.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_138.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st8_fsm_7() {
    if (ap_sig_60.read()) {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    }
}

void selectionSort::thread_ap_sig_cseq_ST_st9_fsm_8() {
    if (ap_sig_266.read()) {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    }
}

void selectionSort::thread_exitcond1_i_fu_217_p2() {
    exitcond1_i_fu_217_p2 = (!i_i_reg_114.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_114.read() == ap_const_lv8_FF);
}

void selectionSort::thread_exitcond_i_fu_277_p2() {
    exitcond_i_fu_277_p2 = (!j_0_in_i_reg_136.read().is_01() || !ap_const_lv16_FF.is_01())? sc_lv<1>(): sc_lv<1>(j_0_in_i_reg_136.read() == ap_const_lv16_FF);
}

void selectionSort::thread_flagFill_load_load_fu_192_p1() {
    flagFill_load_load_fu_192_p1 = flagFill.read();
}

void selectionSort::thread_gepindex2_fu_254_p3() {
    gepindex2_fu_254_p3 = (!tmp_3_fu_247_p3.read()[0].is_01())? sc_lv<64>(): ((tmp_3_fu_247_p3.read()[0].to_bool())? ap_const_lv64_FF: adjSize_fu_243_p1.read());
}

void selectionSort::thread_i_fu_223_p2() {
    i_fu_223_p2 = (!i_i_reg_114.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_i_reg_114.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void selectionSort::thread_i_i_cast1_fu_213_p1() {
    i_i_cast1_fu_213_p1 = esl_zext<16,8>(i_i_reg_114.read());
}

void selectionSort::thread_icmp_fu_186_p2() {
    icmp_fu_186_p2 = (!tmp_fu_176_p4.read().is_01() || !ap_const_lv24_1.is_01())? sc_lv<1>(): (sc_bigint<24>(tmp_fu_176_p4.read()) < sc_bigint<24>(ap_const_lv24_1));
}

void selectionSort::thread_index_min_1_fu_303_p1() {
    index_min_1_fu_303_p1 = esl_sext<32,16>(j_reg_368.read());
}

void selectionSort::thread_index_min_1_i_index_min1_i_fu_314_p3() {
    index_min_1_i_index_min1_i_fu_314_p3 = (!tmp_i_5_fu_297_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_i_5_fu_297_p2.read()[0].to_bool())? index_min_1_fu_303_p1.read(): index_min1_i_reg_145.read());
}

void selectionSort::thread_index_min_fu_267_p1() {
    index_min_fu_267_p1 = esl_zext<32,8>(i_i_reg_114.read());
}

void selectionSort::thread_j_fu_271_p2() {
    j_fu_271_p2 = (!j_0_in_i_reg_136.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(j_0_in_i_reg_136.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void selectionSort::thread_mem_index_gep5_cast_fu_240_p1() {
    mem_index_gep5_cast_fu_240_p1 = esl_sext<11,8>(posOutData.read());
}

void selectionSort::thread_min_1_fu_293_p1() {
    min_1_fu_293_p1 = esl_sext<32,16>(A_q0.read());
}

void selectionSort::thread_min_1_i_min1_i_fu_306_p3() {
    min_1_i_min1_i_fu_306_p3 = (!tmp_i_5_fu_297_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_i_5_fu_297_p2.read()[0].to_bool())? min_1_fu_293_p1.read(): min1_i_reg_126.read());
}

void selectionSort::thread_min_fu_263_p1() {
    min_fu_263_p1 = esl_sext<32,16>(A_q0.read());
}

void selectionSort::thread_tmp_1_fu_196_p1() {
    tmp_1_fu_196_p1 = esl_sext<64,32>(count.read());
}

void selectionSort::thread_tmp_2_fu_201_p2() {
    tmp_2_fu_201_p2 = (!count.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(count.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void selectionSort::thread_tmp_3_fu_247_p3() {
    tmp_3_fu_247_p3 = posOutData.read().range(7, 7);
}

void selectionSort::thread_tmp_7_i_fu_288_p1() {
    tmp_7_i_fu_288_p1 = esl_zext<64,32>(index_min1_i_reg_145.read());
}

void selectionSort::thread_tmp_9_i_fu_283_p1() {
    tmp_9_i_fu_283_p1 = esl_sext<64,16>(j_fu_271_p2.read());
}

void selectionSort::thread_tmp_fu_176_p4() {
    tmp_fu_176_p4 = count.read().range(31, 8);
}

void selectionSort::thread_tmp_i_5_fu_297_p2() {
    tmp_i_5_fu_297_p2 = (!min_1_fu_293_p1.read().is_01() || !min1_i_reg_126.read().is_01())? sc_lv<1>(): (sc_biguint<32>(min_1_fu_293_p1.read()) < sc_biguint<32>(min1_i_reg_126.read()));
}

void selectionSort::thread_tmp_i_fu_229_p1() {
    tmp_i_fu_229_p1 = esl_zext<64,8>(i_i_reg_114.read());
}

void selectionSort::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && !esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_186_p2.read()))) {
                ap_NS_fsm = ap_ST_st9_fsm_8;
            } else if ((!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_186_p2.read()))) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if ((!esl_seteq<1,1,1>(ap_const_lv1_0, flagFill_load_reg_331.read()) || !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i_fu_217_p2.read()))) {
                ap_NS_fsm = ap_ST_st8_fsm_7;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_277_p2.read())) {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

void selectionSort::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dataIn\" :  \"" << dataIn.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"posOutData\" :  \"" << posOutData.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

