// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module heapSort_maxHeapify_noRecurv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        startA,
        endA,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1
);

parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_st3_fsm_2 = 8'b100;
parameter    ap_ST_st4_fsm_3 = 8'b1000;
parameter    ap_ST_st5_fsm_4 = 8'b10000;
parameter    ap_ST_st6_fsm_5 = 8'b100000;
parameter    ap_ST_st7_fsm_6 = 8'b1000000;
parameter    ap_ST_st8_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv16_2 = 16'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] startA;
input  [9:0] endA;
output  [7:0] A_address0;
output   A_ce0;
output   A_we0;
output  [15:0] A_d0;
input  [15:0] A_q0;
output  [7:0] A_address1;
output   A_ce1;
output   A_we1;
output  [15:0] A_d1;
input  [15:0] A_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] A_address0;
reg A_ce0;
reg A_we0;
reg[7:0] A_address1;
reg A_ce1;
reg A_we1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_25;
wire   [15:0] endA_cast1_fu_125_p1;
reg   [15:0] endA_cast1_reg_258;
wire   [15:0] startA_cast_fu_129_p1;
wire   [8:0] i_1_fu_147_p2;
reg   [8:0] i_1_reg_272;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_61;
wire   [15:0] current_4_fu_159_p2;
reg   [15:0] current_4_reg_277;
wire   [0:0] tmp_fu_142_p2;
wire   [15:0] current_5_fu_165_p2;
reg   [15:0] current_5_reg_282;
wire   [0:0] tmp_4_fu_171_p2;
reg   [0:0] tmp_4_reg_288;
wire   [0:0] tmp_8_fu_186_p2;
reg   [0:0] tmp_8_reg_303;
wire   [15:0] current_1_fu_198_p3;
reg   [15:0] current_1_reg_308;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_87;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_96;
wire   [15:0] startA_assign_fu_219_p3;
reg   [15:0] startA_assign_reg_325;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_110;
wire   [0:0] tmp_3_fu_228_p2;
reg   [0:0] tmp_3_reg_333;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_119;
reg   [7:0] A_addr_4_reg_337;
reg   [7:0] A_addr_5_reg_342;
reg   [15:0] temp_reg_347;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_133;
reg   [15:0] current_reg_98;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_142;
reg   [8:0] i_reg_108;
wire  signed [63:0] tmp_5_fu_176_p1;
wire  signed [63:0] tmp_6_fu_181_p1;
wire  signed [63:0] tmp_9_fu_205_p1;
wire  signed [63:0] tmp_s_fu_209_p1;
wire  signed [63:0] tmp_10_fu_233_p1;
wire  signed [63:0] tmp_11_fu_237_p1;
reg   [15:0] p_0_fu_26;
wire   [9:0] i_cast_fu_138_p1;
wire   [15:0] tmp_1_fu_153_p2;
wire   [0:0] grp_fu_119_p2;
wire   [15:0] p_current_fu_191_p3;
wire   [15:0] p_current_1_fu_213_p3;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        current_reg_98 <= startA_assign_reg_325;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        current_reg_98 <= startA_cast_fu_129_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        i_reg_108 <= i_1_reg_272;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_108 <= ap_const_lv9_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == tmp_3_fu_228_p2))) begin
        p_0_fu_26 <= startA_assign_reg_325;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        p_0_fu_26 <= startA_cast_fu_129_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == tmp_3_fu_228_p2))) begin
        A_addr_4_reg_337 <= tmp_10_fu_233_p1;
        A_addr_5_reg_342 <= tmp_11_fu_237_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        current_1_reg_308 <= current_1_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_142_p2 == 1'b0))) begin
        current_4_reg_277[15 : 1] <= current_4_fu_159_p2[15 : 1];
        current_5_reg_282[15 : 1] <= current_5_fu_165_p2[15 : 1];
        tmp_4_reg_288 <= tmp_4_fu_171_p2;
        tmp_8_reg_303 <= tmp_8_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        endA_cast1_reg_258[9 : 0] <= endA_cast1_fu_125_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_272 <= i_1_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        startA_assign_reg_325 <= startA_assign_fu_219_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        temp_reg_347 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        tmp_3_reg_333 <= tmp_3_fu_228_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        A_address0 = A_addr_4_reg_337;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        A_address0 = tmp_10_fu_233_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_address0 = tmp_9_fu_205_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        A_address0 = tmp_5_fu_176_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        A_address1 = A_addr_5_reg_342;
    end else if ((1'b1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        A_address1 = tmp_11_fu_237_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_address1 = tmp_s_fu_209_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        A_address1 = tmp_6_fu_181_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st6_fsm_5) | (1'b1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & (1'b0 == tmp_3_reg_333))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_142_p2 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_142_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_25) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_61) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_87) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_96) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_110) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_119) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_133) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_142) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((tmp_fu_142_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            if (~(1'b0 == tmp_3_fu_228_p2)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = A_q1;

assign A_d1 = temp_reg_347;

always @ (*) begin
    ap_sig_110 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_119 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_133 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_142 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_25 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_61 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_87 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_96 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign current_1_fu_198_p3 = ((tmp_4_reg_288[0:0] === 1'b1) ? p_current_fu_191_p3 : current_reg_98);

assign current_4_fu_159_p2 = (tmp_1_fu_153_p2 | ap_const_lv16_1);

assign current_5_fu_165_p2 = (ap_const_lv16_2 + tmp_1_fu_153_p2);

assign endA_cast1_fu_125_p1 = endA;

assign grp_fu_119_p2 = (($signed(A_q0) < $signed(A_q1)) ? 1'b1 : 1'b0);

assign i_1_fu_147_p2 = (i_reg_108 + ap_const_lv9_1);

assign i_cast_fu_138_p1 = i_reg_108;

assign p_current_1_fu_213_p3 = ((grp_fu_119_p2[0:0] === 1'b1) ? current_5_reg_282 : current_1_reg_308);

assign p_current_fu_191_p3 = ((grp_fu_119_p2[0:0] === 1'b1) ? current_4_reg_277 : current_reg_98);

assign startA_assign_fu_219_p3 = ((tmp_8_reg_303[0:0] === 1'b1) ? p_current_1_fu_213_p3 : current_1_reg_308);

assign startA_cast_fu_129_p1 = startA;

assign tmp_10_fu_233_p1 = $signed(startA_assign_reg_325);

assign tmp_11_fu_237_p1 = $signed(p_0_fu_26);

assign tmp_1_fu_153_p2 = current_reg_98 << ap_const_lv16_1;

assign tmp_3_fu_228_p2 = ((startA_assign_reg_325 == p_0_fu_26) ? 1'b1 : 1'b0);

assign tmp_4_fu_171_p2 = (($signed(current_4_fu_159_p2) < $signed(endA_cast1_reg_258)) ? 1'b1 : 1'b0);

assign tmp_5_fu_176_p1 = $signed(current_reg_98);

assign tmp_6_fu_181_p1 = $signed(current_4_fu_159_p2);

assign tmp_8_fu_186_p2 = (($signed(current_5_fu_165_p2) < $signed(endA_cast1_reg_258)) ? 1'b1 : 1'b0);

assign tmp_9_fu_205_p1 = $signed(current_1_reg_308);

assign tmp_fu_142_p2 = (($signed(i_cast_fu_138_p1) < $signed(endA)) ? 1'b1 : 1'b0);

assign tmp_s_fu_209_p1 = $signed(current_5_reg_282);

always @ (posedge ap_clk) begin
    endA_cast1_reg_258[15:10] <= 6'b000000;
    current_4_reg_277[0] <= 1'b1;
    current_5_reg_282[0] <= 1'b0;
end

endmodule //heapSort_maxHeapify_noRecurv
