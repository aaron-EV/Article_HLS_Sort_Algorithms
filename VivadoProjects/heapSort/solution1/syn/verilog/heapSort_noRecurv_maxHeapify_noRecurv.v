// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module heapSort_noRecurv_maxHeapify_noRecurv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1,
        startA,
        endA
);

parameter    ap_ST_st1_fsm_0 = 17'b1;
parameter    ap_ST_st2_fsm_1 = 17'b10;
parameter    ap_ST_st3_fsm_2 = 17'b100;
parameter    ap_ST_st4_fsm_3 = 17'b1000;
parameter    ap_ST_st5_fsm_4 = 17'b10000;
parameter    ap_ST_st6_fsm_5 = 17'b100000;
parameter    ap_ST_st7_fsm_6 = 17'b1000000;
parameter    ap_ST_st8_fsm_7 = 17'b10000000;
parameter    ap_ST_st9_fsm_8 = 17'b100000000;
parameter    ap_ST_st10_fsm_9 = 17'b1000000000;
parameter    ap_ST_st11_fsm_10 = 17'b10000000000;
parameter    ap_ST_st12_fsm_11 = 17'b100000000000;
parameter    ap_ST_st13_fsm_12 = 17'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 17'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 17'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 17'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 17'b10000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv9_181 = 9'b110000001;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv5_4 = 5'b100;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
input  [31:0] A_q0;
output  [5:0] A_address1;
output   A_ce1;
output   A_we1;
output  [31:0] A_d1;
input  [31:0] A_q1;
input  [5:0] startA;
input  [6:0] endA;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] A_address0;
reg A_ce0;
reg A_we0;
reg[5:0] A_address1;
reg A_ce1;
reg A_we1;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_34;
reg   [31:0] reg_158;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_60;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_67;
reg   [0:0] tmp_7_reg_664;
reg   [31:0] reg_163;
wire   [31:0] endA_cast1_fu_168_p1;
reg   [31:0] endA_cast1_reg_618;
wire   [31:0] startA_cast_fu_172_p1;
wire   [5:0] i_1_fu_190_p2;
reg   [5:0] i_1_reg_632;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_92;
wire   [31:0] left_fu_202_p2;
reg   [31:0] left_reg_637;
wire   [0:0] exitcond_fu_185_p2;
wire   [31:0] right_fu_208_p2;
reg   [31:0] right_reg_642;
wire   [0:0] tmp_3_fu_214_p2;
reg   [0:0] tmp_3_reg_648;
wire   [0:0] tmp_7_fu_229_p2;
wire   [0:0] sel_tmp_fu_318_p2;
reg   [0:0] sel_tmp_reg_670;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_115;
wire   [31:0] current_1_fu_329_p3;
reg   [31:0] current_1_reg_675;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_127;
wire   [0:0] sel_tmp4_fu_429_p2;
reg   [0:0] sel_tmp4_reg_691;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_141;
wire   [31:0] current_6_fu_442_p3;
reg   [31:0] current_6_reg_696;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_151;
wire   [0:0] tmp_1_fu_448_p2;
reg   [0:0] tmp_1_reg_701;
reg   [5:0] A_addr_4_reg_705;
reg   [5:0] A_addr_5_reg_710;
reg   [0:0] p_Result_s_reg_715;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_168;
wire   [22:0] loc_V_1_fu_491_p1;
reg   [22:0] loc_V_1_reg_720;
wire   [0:0] isNeg_fu_505_p3;
reg   [0:0] isNeg_reg_725;
wire   [8:0] sh_assign_1_fu_523_p3;
reg   [8:0] sh_assign_1_reg_730;
wire   [31:0] p_Val2_s_fu_599_p3;
reg   [31:0] p_Val2_s_reg_736;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_183;
wire   [31:0] grp_fu_151_p1;
reg   [31:0] tmp_2_i_reg_741;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_192;
reg   [31:0] current_reg_130;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_201;
reg   [5:0] i_reg_140;
wire  signed [63:0] tmp_4_fu_219_p1;
wire   [63:0] tmp_5_fu_224_p1;
wire  signed [63:0] tmp_8_fu_336_p1;
wire   [63:0] tmp_9_fu_341_p1;
wire   [63:0] tmp_i_fu_454_p1;
wire  signed [63:0] tmp_1_i_fu_459_p1;
reg   [31:0] j_assign_fu_58;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_231;
wire   [6:0] i_cast_fu_181_p1;
wire   [31:0] tmp_fu_196_p2;
wire   [31:0] A_load_to_int_fu_234_p1;
wire   [31:0] A_load_1_to_int_fu_252_p1;
wire   [7:0] tmp_2_fu_238_p4;
wire   [22:0] tmp_6_fu_248_p1;
wire   [0:0] notrhs_fu_276_p2;
wire   [0:0] notlhs_fu_270_p2;
wire   [7:0] tmp_s_fu_256_p4;
wire   [22:0] tmp_10_fu_266_p1;
wire   [0:0] notrhs3_fu_294_p2;
wire   [0:0] notlhs2_fu_288_p2;
wire   [0:0] tmp_11_fu_282_p2;
wire   [0:0] tmp_12_fu_300_p2;
wire   [0:0] tmp_13_fu_306_p2;
wire   [0:0] grp_fu_154_p2;
wire   [0:0] tmp_15_fu_312_p2;
wire   [31:0] current_3_fu_323_p3;
wire   [31:0] A_load_2_to_int_fu_345_p1;
wire   [31:0] A_load_3_to_int_fu_363_p1;
wire   [7:0] tmp_16_fu_349_p4;
wire   [22:0] tmp_17_fu_359_p1;
wire   [0:0] notrhs5_fu_387_p2;
wire   [0:0] notlhs4_fu_381_p2;
wire   [7:0] tmp_18_fu_367_p4;
wire   [22:0] tmp_19_fu_377_p1;
wire   [0:0] notrhs7_fu_405_p2;
wire   [0:0] notlhs6_fu_399_p2;
wire   [0:0] tmp_20_fu_393_p2;
wire   [0:0] tmp_21_fu_411_p2;
wire   [0:0] tmp_22_fu_417_p2;
wire   [0:0] tmp_24_fu_423_p2;
wire   [31:0] current_5_fu_437_p3;
wire   [31:0] p_Val2_1_fu_469_p1;
wire   [7:0] loc_V_fu_481_p4;
wire   [8:0] tmp_i_i_i_i_cast_fu_495_p1;
wire   [8:0] sh_assign_fu_499_p2;
wire   [7:0] tmp_2_i_i_i_fu_513_p2;
wire  signed [8:0] tmp_2_i_i_i_cast_fu_519_p1;
wire   [23:0] p_Result_1_fu_531_p3;
wire  signed [31:0] sh_assign_1_cast_fu_542_p1;
wire  signed [23:0] sh_assign_1_cast_cast_fu_545_p1;
wire   [77:0] tmp_i_i_i_fu_538_p1;
wire   [77:0] tmp_3_i_i_i_fu_548_p1;
wire   [23:0] tmp_4_i_i_i_fu_552_p2;
wire   [0:0] tmp_30_fu_564_p3;
wire   [77:0] tmp_6_i_i_i_fu_558_p2;
wire   [31:0] tmp_25_fu_572_p1;
wire   [31:0] tmp_26_fu_576_p4;
wire   [31:0] p_Val2_4_fu_586_p3;
wire   [31:0] p_Val2_7_i_i_i_fu_593_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'b1;
end

heapSort_noRecurv_sitofp_32ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
heapSort_noRecurv_sitofp_32ns_32_6_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_Val2_s_reg_736),
    .ce(1'b1),
    .dout(grp_fu_151_p1)
);

heapSort_noRecurv_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
heapSort_noRecurv_fcmp_32ns_32ns_1_1_U1(
    .din0(reg_158),
    .din1(reg_163),
    .opcode(ap_const_lv5_4),
    .dout(grp_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        current_reg_130 <= current_6_reg_696;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        current_reg_130 <= startA_cast_fu_172_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        i_reg_140 <= i_1_reg_632;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_140 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & (1'b0 == tmp_1_fu_448_p2))) begin
        j_assign_fu_58 <= current_6_fu_442_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        j_assign_fu_58 <= startA_cast_fu_172_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & (1'b0 == tmp_1_fu_448_p2))) begin
        A_addr_4_reg_705 <= tmp_i_fu_454_p1;
        A_addr_5_reg_710 <= tmp_1_i_fu_459_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        current_1_reg_675 <= current_1_fu_329_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        current_6_reg_696 <= current_6_fu_442_p3;
        tmp_1_reg_701 <= tmp_1_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        endA_cast1_reg_618[6 : 0] <= endA_cast1_fu_168_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_632 <= i_1_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        isNeg_reg_725 <= sh_assign_fu_499_p2[ap_const_lv32_8];
        loc_V_1_reg_720 <= loc_V_1_fu_491_p1;
        p_Result_s_reg_715 <= p_Val2_1_fu_469_p1[ap_const_lv32_1F];
        sh_assign_1_reg_730 <= sh_assign_1_fu_523_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond_fu_185_p2))) begin
        left_reg_637[31 : 1] <= left_fu_202_p2[31 : 1];
        right_reg_642[31 : 1] <= right_fu_208_p2[31 : 1];
        tmp_3_reg_648 <= tmp_3_fu_214_p2;
        tmp_7_reg_664 <= tmp_7_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        p_Val2_s_reg_736 <= p_Val2_s_fu_599_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | ((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~(tmp_7_reg_664 == 1'b0)))) begin
        reg_158 <= A_q0;
        reg_163 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(tmp_7_reg_664 == 1'b0) & (1'b1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        sel_tmp4_reg_691 <= sel_tmp4_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_3_reg_648))) begin
        sel_tmp_reg_670 <= sel_tmp_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        tmp_2_i_reg_741 <= grp_fu_151_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        A_address0 = A_addr_4_reg_705;
    end else if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        A_address0 = tmp_i_fu_454_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        A_address0 = tmp_8_fu_336_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        A_address0 = tmp_4_fu_219_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        A_address1 = A_addr_5_reg_710;
    end else if ((1'b1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        A_address1 = tmp_1_i_fu_459_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        A_address1 = tmp_9_fu_341_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        A_address1 = tmp_5_fu_224_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4) | (1'b1 == ap_sig_cseq_ST_st8_fsm_7) | (1'b1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st17_fsm_16) & (1'b0 == tmp_1_reg_701))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond_fu_185_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond_fu_185_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_183) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_231) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_192) begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_201) begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_34) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_92) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_60) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_115) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_127) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_67) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_141) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_151) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_168) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond_fu_185_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            if (~(1'b0 == tmp_1_fu_448_p2)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = A_q1;

assign A_d1 = tmp_2_i_reg_741;

assign A_load_1_to_int_fu_252_p1 = reg_163;

assign A_load_2_to_int_fu_345_p1 = reg_158;

assign A_load_3_to_int_fu_363_p1 = reg_163;

assign A_load_to_int_fu_234_p1 = reg_158;

always @ (*) begin
    ap_sig_115 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_127 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_141 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_151 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_168 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_183 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_192 = (1'b1 == ap_CS_fsm[ap_const_lv32_F]);
end

always @ (*) begin
    ap_sig_201 = (1'b1 == ap_CS_fsm[ap_const_lv32_10]);
end

always @ (*) begin
    ap_sig_231 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_34 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_60 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_67 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_92 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign current_1_fu_329_p3 = ((tmp_3_reg_648[0:0] === 1'b1) ? current_3_fu_323_p3 : current_reg_130);

assign current_3_fu_323_p3 = ((sel_tmp_reg_670[0:0] === 1'b1) ? left_reg_637 : current_reg_130);

assign current_5_fu_437_p3 = ((sel_tmp4_reg_691[0:0] === 1'b1) ? right_reg_642 : current_1_reg_675);

assign current_6_fu_442_p3 = ((tmp_7_reg_664[0:0] === 1'b1) ? current_5_fu_437_p3 : current_1_reg_675);

assign endA_cast1_fu_168_p1 = endA;

assign exitcond_fu_185_p2 = ((i_cast_fu_181_p1 == endA) ? 1'b1 : 1'b0);

assign i_1_fu_190_p2 = (i_reg_140 + ap_const_lv6_1);

assign i_cast_fu_181_p1 = i_reg_140;

assign isNeg_fu_505_p3 = sh_assign_fu_499_p2[ap_const_lv32_8];

assign left_fu_202_p2 = (tmp_fu_196_p2 | ap_const_lv32_1);

assign loc_V_1_fu_491_p1 = p_Val2_1_fu_469_p1[22:0];

assign loc_V_fu_481_p4 = {{p_Val2_1_fu_469_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign notlhs2_fu_288_p2 = ((tmp_s_fu_256_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs4_fu_381_p2 = ((tmp_16_fu_349_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs6_fu_399_p2 = ((tmp_18_fu_367_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notlhs_fu_270_p2 = ((tmp_2_fu_238_p4 != ap_const_lv8_FF) ? 1'b1 : 1'b0);

assign notrhs3_fu_294_p2 = ((tmp_10_fu_266_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs5_fu_387_p2 = ((tmp_17_fu_359_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs7_fu_405_p2 = ((tmp_19_fu_377_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign notrhs_fu_276_p2 = ((tmp_6_fu_248_p1 == ap_const_lv23_0) ? 1'b1 : 1'b0);

assign p_Result_1_fu_531_p3 = {{1'b1}, {loc_V_1_reg_720}};

assign p_Val2_1_fu_469_p1 = A_q0;

assign p_Val2_4_fu_586_p3 = ((isNeg_reg_725[0:0] === 1'b1) ? tmp_25_fu_572_p1 : tmp_26_fu_576_p4);

assign p_Val2_7_i_i_i_fu_593_p2 = (ap_const_lv32_0 - p_Val2_4_fu_586_p3);

assign p_Val2_s_fu_599_p3 = ((p_Result_s_reg_715[0:0] === 1'b1) ? p_Val2_7_i_i_i_fu_593_p2 : p_Val2_4_fu_586_p3);

assign right_fu_208_p2 = (ap_const_lv32_2 + tmp_fu_196_p2);

assign sel_tmp4_fu_429_p2 = (tmp_7_reg_664 & tmp_24_fu_423_p2);

assign sel_tmp_fu_318_p2 = (tmp_3_reg_648 & tmp_15_fu_312_p2);

assign sh_assign_1_cast_cast_fu_545_p1 = $signed(sh_assign_1_reg_730);

assign sh_assign_1_cast_fu_542_p1 = $signed(sh_assign_1_reg_730);

assign sh_assign_1_fu_523_p3 = ((isNeg_fu_505_p3[0:0] === 1'b1) ? tmp_2_i_i_i_cast_fu_519_p1 : sh_assign_fu_499_p2);

assign sh_assign_fu_499_p2 = ($signed(ap_const_lv9_181) + $signed(tmp_i_i_i_i_cast_fu_495_p1));

assign startA_cast_fu_172_p1 = startA;

assign tmp_10_fu_266_p1 = A_load_1_to_int_fu_252_p1[22:0];

assign tmp_11_fu_282_p2 = (notrhs_fu_276_p2 | notlhs_fu_270_p2);

assign tmp_12_fu_300_p2 = (notrhs3_fu_294_p2 | notlhs2_fu_288_p2);

assign tmp_13_fu_306_p2 = (tmp_11_fu_282_p2 & tmp_12_fu_300_p2);

assign tmp_15_fu_312_p2 = (tmp_13_fu_306_p2 & grp_fu_154_p2);

assign tmp_16_fu_349_p4 = {{A_load_2_to_int_fu_345_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_17_fu_359_p1 = A_load_2_to_int_fu_345_p1[22:0];

assign tmp_18_fu_367_p4 = {{A_load_3_to_int_fu_363_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_19_fu_377_p1 = A_load_3_to_int_fu_363_p1[22:0];

assign tmp_1_fu_448_p2 = ((current_6_fu_442_p3 == j_assign_fu_58) ? 1'b1 : 1'b0);

assign tmp_1_i_fu_459_p1 = $signed(j_assign_fu_58);

assign tmp_20_fu_393_p2 = (notrhs5_fu_387_p2 | notlhs4_fu_381_p2);

assign tmp_21_fu_411_p2 = (notrhs7_fu_405_p2 | notlhs6_fu_399_p2);

assign tmp_22_fu_417_p2 = (tmp_20_fu_393_p2 & tmp_21_fu_411_p2);

assign tmp_24_fu_423_p2 = (tmp_22_fu_417_p2 & grp_fu_154_p2);

assign tmp_25_fu_572_p1 = tmp_30_fu_564_p3;

assign tmp_26_fu_576_p4 = {{tmp_6_i_i_i_fu_558_p2[ap_const_lv32_36 : ap_const_lv32_17]}};

assign tmp_2_fu_238_p4 = {{A_load_to_int_fu_234_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

assign tmp_2_i_i_i_cast_fu_519_p1 = $signed(tmp_2_i_i_i_fu_513_p2);

assign tmp_2_i_i_i_fu_513_p2 = (ap_const_lv8_7F - loc_V_fu_481_p4);

assign tmp_30_fu_564_p3 = tmp_4_i_i_i_fu_552_p2[ap_const_lv32_17];

assign tmp_3_fu_214_p2 = ((left_fu_202_p2 < endA_cast1_reg_618) ? 1'b1 : 1'b0);

assign tmp_3_i_i_i_fu_548_p1 = $unsigned(sh_assign_1_cast_fu_542_p1);

assign tmp_4_fu_219_p1 = $signed(current_reg_130);

assign tmp_4_i_i_i_fu_552_p2 = p_Result_1_fu_531_p3 >> sh_assign_1_cast_cast_fu_545_p1;

assign tmp_5_fu_224_p1 = left_fu_202_p2;

assign tmp_6_fu_248_p1 = A_load_to_int_fu_234_p1[22:0];

assign tmp_6_i_i_i_fu_558_p2 = tmp_i_i_i_fu_538_p1 << tmp_3_i_i_i_fu_548_p1;

assign tmp_7_fu_229_p2 = ((right_fu_208_p2 < endA_cast1_reg_618) ? 1'b1 : 1'b0);

assign tmp_8_fu_336_p1 = $signed(current_1_fu_329_p3);

assign tmp_9_fu_341_p1 = right_reg_642;

assign tmp_fu_196_p2 = current_reg_130 << ap_const_lv32_1;

assign tmp_i_fu_454_p1 = current_6_fu_442_p3;

assign tmp_i_i_i_fu_538_p1 = p_Result_1_fu_531_p3;

assign tmp_i_i_i_i_cast_fu_495_p1 = loc_V_fu_481_p4;

assign tmp_s_fu_256_p4 = {{A_load_1_to_int_fu_252_p1[ap_const_lv32_1E : ap_const_lv32_17]}};

always @ (posedge ap_clk) begin
    endA_cast1_reg_618[31:7] <= 25'b0000000000000000000000000;
    left_reg_637[0] <= 1'b1;
    right_reg_642[0] <= 1'b0;
end

endmodule //heapSort_noRecurv_maxHeapify_noRecurv
