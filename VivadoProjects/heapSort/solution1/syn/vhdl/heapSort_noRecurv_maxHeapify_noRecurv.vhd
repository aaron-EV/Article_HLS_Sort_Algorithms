-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity heapSort_noRecurv_maxHeapify_noRecurv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    startA : IN STD_LOGIC_VECTOR (5 downto 0);
    endA : IN STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of heapSort_noRecurv_maxHeapify_noRecurv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_34 : BOOLEAN;
    signal reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_60 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_67 : BOOLEAN;
    signal tmp_7_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal endA_cast1_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal endA_cast1_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal startA_cast_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_190_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_632 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_92 : BOOLEAN;
    signal left_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_reg_637 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal right_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_670 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_115 : BOOLEAN;
    signal current_1_fu_329_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_1_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_127 : BOOLEAN;
    signal sel_tmp4_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_691 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_141 : BOOLEAN;
    signal current_6_fu_442_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_6_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_151 : BOOLEAN;
    signal tmp_1_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_addr_4_reg_705 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_addr_5_reg_710 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_168 : BOOLEAN;
    signal loc_V_1_fu_491_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_720 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_505_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_725 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_523_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_730 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_s_fu_599_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_183 : BOOLEAN;
    signal grp_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_192 : BOOLEAN;
    signal current_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_201 : BOOLEAN;
    signal i_reg_140 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_i_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_assign_fu_58 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_231 : BOOLEAN;
    signal i_cast_fu_181_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_to_int_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_1_to_int_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_238_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_248_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_256_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_266_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_3_fu_323_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_2_to_int_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_load_3_to_int_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_349_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_359_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs5_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs4_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_367_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_377_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs7_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_5_fu_437_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_fu_481_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast_fu_495_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_499_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_i_i_i_fu_513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_i_i_cast_fu_519_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_1_fu_531_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sh_assign_1_cast_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_545_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i_fu_538_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_3_i_i_i_fu_548_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_4_i_i_i_fu_552_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_30_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_i_i_fu_558_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_25_fu_572_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_576_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i_i_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component heapSort_noRecurv_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component heapSort_noRecurv_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    heapSort_noRecurv_sitofp_32ns_32_6_U0 : component heapSort_noRecurv_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_Val2_s_reg_736,
        ce => ap_const_logic_1,
        dout => grp_fu_151_p1);

    heapSort_noRecurv_fcmp_32ns_32ns_1_1_U1 : component heapSort_noRecurv_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_158,
        din1 => reg_163,
        opcode => ap_const_lv5_4,
        dout => grp_fu_154_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    current_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                current_reg_130 <= current_6_reg_696;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                current_reg_130 <= startA_cast_fu_172_p1;
            end if; 
        end if;
    end process;

    i_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
                i_reg_140 <= i_1_reg_632;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_140 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_assign_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_1_fu_448_p2))) then 
                j_assign_fu_58 <= current_6_fu_442_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_assign_fu_58 <= startA_cast_fu_172_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_1_fu_448_p2))) then
                A_addr_4_reg_705 <= tmp_i_fu_454_p1(6 - 1 downto 0);
                A_addr_5_reg_710 <= tmp_1_i_fu_459_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                current_1_reg_675 <= current_1_fu_329_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                current_6_reg_696 <= current_6_fu_442_p3;
                tmp_1_reg_701 <= tmp_1_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    endA_cast1_reg_618(6 downto 0) <= endA_cast1_fu_168_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_632 <= i_1_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                isNeg_reg_725 <= sh_assign_fu_499_p2(8 downto 8);
                loc_V_1_reg_720 <= loc_V_1_fu_491_p1;
                p_Result_s_reg_715 <= p_Val2_1_fu_469_p1(31 downto 31);
                sh_assign_1_reg_730 <= sh_assign_1_fu_523_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond_fu_185_p2))) then
                    left_reg_637(31 downto 1) <= left_fu_202_p2(31 downto 1);
                    right_reg_642(31 downto 1) <= right_fu_208_p2(31 downto 1);
                tmp_3_reg_648 <= tmp_3_fu_214_p2;
                tmp_7_reg_664 <= tmp_7_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                p_Val2_s_reg_736 <= p_Val2_s_fu_599_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((tmp_7_reg_664 = ap_const_lv1_0))))) then
                reg_158 <= A_q0;
                reg_163 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((tmp_7_reg_664 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then
                sel_tmp4_reg_691 <= sel_tmp4_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_3_reg_648)))) then
                sel_tmp_reg_670 <= sel_tmp_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                tmp_2_i_reg_741 <= grp_fu_151_p1;
            end if;
        end if;
    end process;
    endA_cast1_reg_618(31 downto 7) <= "0000000000000000000000000";
    left_reg_637(0) <= '1';
    right_reg_642(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_185_p2, tmp_1_fu_448_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond_fu_185_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = tmp_1_fu_448_p2))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, A_addr_4_reg_705, ap_sig_cseq_ST_st9_fsm_8, tmp_4_fu_219_p1, tmp_8_fu_336_p1, tmp_i_fu_454_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            A_address0 <= A_addr_4_reg_705;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            A_address0 <= tmp_i_fu_454_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            A_address0 <= tmp_8_fu_336_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            A_address0 <= tmp_4_fu_219_p1(6 - 1 downto 0);
        else 
            A_address0 <= "XXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, A_addr_5_reg_710, ap_sig_cseq_ST_st17_fsm_16, tmp_5_fu_224_p1, tmp_9_fu_341_p1, tmp_1_i_fu_459_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            A_address1 <= A_addr_5_reg_710;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            A_address1 <= tmp_1_i_fu_459_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            A_address1 <= tmp_9_fu_341_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            A_address1 <= tmp_5_fu_224_p1(6 - 1 downto 0);
        else 
            A_address1 <= "XXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= A_q1;
    A_d1 <= tmp_2_i_reg_741;
    A_load_1_to_int_fu_252_p1 <= reg_163;
    A_load_2_to_int_fu_345_p1 <= reg_158;
    A_load_3_to_int_fu_363_p1 <= reg_163;
    A_load_to_int_fu_234_p1 <= reg_158;

    A_we0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we1_assign_proc : process(tmp_1_reg_701, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and (ap_const_lv1_0 = tmp_1_reg_701)))) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_185_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_185_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_185_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_185_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_115 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_127_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_127 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_141 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_151 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_168_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_168 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_183 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_192 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_201_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_201 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_231_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_231 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_34_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_34 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_60 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_67_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_67 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_92 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_183)
    begin
        if (ap_sig_183) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_231)
    begin
        if (ap_sig_231) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_192)
    begin
        if (ap_sig_192) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_201)
    begin
        if (ap_sig_201) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_34)
    begin
        if (ap_sig_34) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_92)
    begin
        if (ap_sig_92) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_60)
    begin
        if (ap_sig_60) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_115)
    begin
        if (ap_sig_115) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_127)
    begin
        if (ap_sig_127) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_67)
    begin
        if (ap_sig_67) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_141)
    begin
        if (ap_sig_141) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_151)
    begin
        if (ap_sig_151) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_168)
    begin
        if (ap_sig_168) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    current_1_fu_329_p3 <= 
        current_3_fu_323_p3 when (tmp_3_reg_648(0) = '1') else 
        current_reg_130;
    current_3_fu_323_p3 <= 
        left_reg_637 when (sel_tmp_reg_670(0) = '1') else 
        current_reg_130;
    current_5_fu_437_p3 <= 
        right_reg_642 when (sel_tmp4_reg_691(0) = '1') else 
        current_1_reg_675;
    current_6_fu_442_p3 <= 
        current_5_fu_437_p3 when (tmp_7_reg_664(0) = '1') else 
        current_1_reg_675;
    endA_cast1_fu_168_p1 <= std_logic_vector(resize(unsigned(endA),32));
    exitcond_fu_185_p2 <= "1" when (i_cast_fu_181_p1 = endA) else "0";
    i_1_fu_190_p2 <= std_logic_vector(unsigned(i_reg_140) + unsigned(ap_const_lv6_1));
    i_cast_fu_181_p1 <= std_logic_vector(resize(unsigned(i_reg_140),7));
    isNeg_fu_505_p3 <= sh_assign_fu_499_p2(8 downto 8);
    left_fu_202_p2 <= (tmp_fu_196_p2 or ap_const_lv32_1);
    loc_V_1_fu_491_p1 <= p_Val2_1_fu_469_p1(23 - 1 downto 0);
    loc_V_fu_481_p4 <= p_Val2_1_fu_469_p1(30 downto 23);
    notlhs2_fu_288_p2 <= "0" when (tmp_s_fu_256_p4 = ap_const_lv8_FF) else "1";
    notlhs4_fu_381_p2 <= "0" when (tmp_16_fu_349_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_399_p2 <= "0" when (tmp_18_fu_367_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_270_p2 <= "0" when (tmp_2_fu_238_p4 = ap_const_lv8_FF) else "1";
    notrhs3_fu_294_p2 <= "1" when (tmp_10_fu_266_p1 = ap_const_lv23_0) else "0";
    notrhs5_fu_387_p2 <= "1" when (tmp_17_fu_359_p1 = ap_const_lv23_0) else "0";
    notrhs7_fu_405_p2 <= "1" when (tmp_19_fu_377_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_276_p2 <= "1" when (tmp_6_fu_248_p1 = ap_const_lv23_0) else "0";
    p_Result_1_fu_531_p3 <= (ap_const_lv1_1 & loc_V_1_reg_720);
    p_Val2_1_fu_469_p1 <= A_q0;
    p_Val2_4_fu_586_p3 <= 
        tmp_25_fu_572_p1 when (isNeg_reg_725(0) = '1') else 
        tmp_26_fu_576_p4;
    p_Val2_7_i_i_i_fu_593_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_4_fu_586_p3));
    p_Val2_s_fu_599_p3 <= 
        p_Val2_7_i_i_i_fu_593_p2 when (p_Result_s_reg_715(0) = '1') else 
        p_Val2_4_fu_586_p3;
    right_fu_208_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(tmp_fu_196_p2));
    sel_tmp4_fu_429_p2 <= (tmp_7_reg_664 and tmp_24_fu_423_p2);
    sel_tmp_fu_318_p2 <= (tmp_3_reg_648 and tmp_15_fu_312_p2);
        sh_assign_1_cast_cast_fu_545_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_730),24));

        sh_assign_1_cast_fu_542_p1 <= std_logic_vector(resize(signed(sh_assign_1_reg_730),32));

    sh_assign_1_fu_523_p3 <= 
        tmp_2_i_i_i_cast_fu_519_p1 when (isNeg_fu_505_p3(0) = '1') else 
        sh_assign_fu_499_p2;
    sh_assign_fu_499_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_fu_495_p1));
    startA_cast_fu_172_p1 <= std_logic_vector(resize(unsigned(startA),32));
    tmp_10_fu_266_p1 <= A_load_1_to_int_fu_252_p1(23 - 1 downto 0);
    tmp_11_fu_282_p2 <= (notrhs_fu_276_p2 or notlhs_fu_270_p2);
    tmp_12_fu_300_p2 <= (notrhs3_fu_294_p2 or notlhs2_fu_288_p2);
    tmp_13_fu_306_p2 <= (tmp_11_fu_282_p2 and tmp_12_fu_300_p2);
    tmp_15_fu_312_p2 <= (tmp_13_fu_306_p2 and grp_fu_154_p2);
    tmp_16_fu_349_p4 <= A_load_2_to_int_fu_345_p1(30 downto 23);
    tmp_17_fu_359_p1 <= A_load_2_to_int_fu_345_p1(23 - 1 downto 0);
    tmp_18_fu_367_p4 <= A_load_3_to_int_fu_363_p1(30 downto 23);
    tmp_19_fu_377_p1 <= A_load_3_to_int_fu_363_p1(23 - 1 downto 0);
    tmp_1_fu_448_p2 <= "1" when (current_6_fu_442_p3 = j_assign_fu_58) else "0";
        tmp_1_i_fu_459_p1 <= std_logic_vector(resize(signed(j_assign_fu_58),64));

    tmp_20_fu_393_p2 <= (notrhs5_fu_387_p2 or notlhs4_fu_381_p2);
    tmp_21_fu_411_p2 <= (notrhs7_fu_405_p2 or notlhs6_fu_399_p2);
    tmp_22_fu_417_p2 <= (tmp_20_fu_393_p2 and tmp_21_fu_411_p2);
    tmp_24_fu_423_p2 <= (tmp_22_fu_417_p2 and grp_fu_154_p2);
    tmp_25_fu_572_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_564_p3),32));
    tmp_26_fu_576_p4 <= tmp_6_i_i_i_fu_558_p2(54 downto 23);
    tmp_2_fu_238_p4 <= A_load_to_int_fu_234_p1(30 downto 23);
        tmp_2_i_i_i_cast_fu_519_p1 <= std_logic_vector(resize(signed(tmp_2_i_i_i_fu_513_p2),9));

    tmp_2_i_i_i_fu_513_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_481_p4));
    tmp_30_fu_564_p3 <= tmp_4_i_i_i_fu_552_p2(23 downto 23);
    tmp_3_fu_214_p2 <= "1" when (unsigned(left_fu_202_p2) < unsigned(endA_cast1_reg_618)) else "0";
    tmp_3_i_i_i_fu_548_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_542_p1),78));
        tmp_4_fu_219_p1 <= std_logic_vector(resize(signed(current_reg_130),64));

    tmp_4_i_i_i_fu_552_p2 <= std_logic_vector(shift_right(unsigned(p_Result_1_fu_531_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_545_p1(24-1 downto 0)))));
    tmp_5_fu_224_p1 <= std_logic_vector(resize(unsigned(left_fu_202_p2),64));
    tmp_6_fu_248_p1 <= A_load_to_int_fu_234_p1(23 - 1 downto 0);
    tmp_6_i_i_i_fu_558_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_i_fu_538_p1),to_integer(unsigned('0' & tmp_3_i_i_i_fu_548_p1(31-1 downto 0)))));
    tmp_7_fu_229_p2 <= "1" when (unsigned(right_fu_208_p2) < unsigned(endA_cast1_reg_618)) else "0";
        tmp_8_fu_336_p1 <= std_logic_vector(resize(signed(current_1_fu_329_p3),64));

    tmp_9_fu_341_p1 <= std_logic_vector(resize(unsigned(right_reg_642),64));
    tmp_fu_196_p2 <= std_logic_vector(shift_left(unsigned(current_reg_130),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_i_fu_454_p1 <= std_logic_vector(resize(unsigned(current_6_fu_442_p3),64));
    tmp_i_i_i_fu_538_p1 <= std_logic_vector(resize(unsigned(p_Result_1_fu_531_p3),78));
    tmp_i_i_i_i_cast_fu_495_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_481_p4),9));
    tmp_s_fu_256_p4 <= A_load_1_to_int_fu_252_p1(30 downto 23);
end behav;
