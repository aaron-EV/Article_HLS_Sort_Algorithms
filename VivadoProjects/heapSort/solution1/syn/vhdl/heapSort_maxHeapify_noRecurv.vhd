-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.1
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity heapSort_maxHeapify_noRecurv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    startA : IN STD_LOGIC_VECTOR (7 downto 0);
    endA : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of heapSort_maxHeapify_noRecurv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_25 : BOOLEAN;
    signal endA_cast_fu_129_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal endA_cast_reg_288 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_155_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_302 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_61 : BOOLEAN;
    signal left_fu_173_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal left_reg_307 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal right_fu_179_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal right_reg_312 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_318 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_1_fu_216_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_1_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_87 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_96 : BOOLEAN;
    signal current_2_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_2_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_110 : BOOLEAN;
    signal tmp_12_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_119 : BOOLEAN;
    signal A_addr_4_reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_5_reg_372 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_reg_377 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_133 : BOOLEAN;
    signal current_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_142 : BOOLEAN;
    signal i_reg_112 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_fu_30 : STD_LOGIC_VECTOR (15 downto 0);
    signal startA_cast_fu_133_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_268_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_cast_fu_146_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_161_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_165_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_3_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_current_fu_208_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal current_4_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_current_1_fu_234_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    current_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                current_reg_102 <= current_2_reg_355;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                current_reg_102 <= tmp_fu_137_p1;
            end if; 
        end if;
    end process;

    i_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                i_reg_112 <= i_1_reg_302;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_112 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_0_fu_30_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_12_fu_254_p2))) then 
                p_0_fu_30 <= tmp_15_fu_268_p1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_0_fu_30 <= startA_cast_fu_133_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = tmp_12_fu_254_p2))) then
                A_addr_4_reg_367 <= tmp_13_fu_259_p1(8 - 1 downto 0);
                A_addr_5_reg_372 <= tmp_14_fu_263_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                current_1_reg_338 <= current_1_fu_216_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                current_2_reg_355 <= current_2_fu_241_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    endA_cast_reg_288(9 downto 0) <= endA_cast_fu_129_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_302 <= i_1_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_2_fu_150_p2 = ap_const_lv1_0)))) then
                    left_reg_307(15 downto 1) <= left_fu_173_p2(15 downto 1);
                    right_reg_312(15 downto 1) <= right_fu_179_p2(15 downto 1);
                tmp_5_reg_318 <= tmp_5_fu_185_p2;
                tmp_s_reg_333 <= tmp_s_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                temp_reg_377 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_12_reg_363 <= tmp_12_fu_254_p2;
            end if;
        end if;
    end process;
    endA_cast_reg_288(15 downto 10) <= "000000";
    left_reg_307(0) <= '1';
    right_reg_312(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_2_fu_150_p2, tmp_12_fu_254_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_2_fu_150_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = tmp_12_fu_254_p2))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, A_addr_4_reg_367, ap_sig_cseq_ST_st7_fsm_6, tmp_6_fu_190_p1, tmp_9_fu_223_p1, tmp_13_fu_259_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            A_address0 <= A_addr_4_reg_367;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            A_address0 <= tmp_13_fu_259_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            A_address0 <= tmp_9_fu_223_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            A_address0 <= tmp_6_fu_190_p1(8 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, A_addr_5_reg_372, ap_sig_cseq_ST_st8_fsm_7, tmp_7_fu_195_p1, tmp_1_fu_227_p1, tmp_14_fu_263_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            A_address1 <= A_addr_5_reg_372;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            A_address1 <= tmp_14_fu_263_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            A_address1 <= tmp_1_fu_227_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            A_address1 <= tmp_7_fu_195_p1(8 - 1 downto 0);
        else 
            A_address1 <= "XXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= A_q1;
    A_d1 <= temp_reg_377;

    A_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we1_assign_proc : process(tmp_12_reg_363, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = tmp_12_reg_363)))) then 
            A_we1 <= ap_const_logic_1;
        else 
            A_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, tmp_2_fu_150_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_2_fu_150_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_2_fu_150_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_2_fu_150_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_110 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_119 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_133 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_142 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_61_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_61 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_87_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_87 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_96 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_25)
    begin
        if (ap_sig_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_61)
    begin
        if (ap_sig_61) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_87)
    begin
        if (ap_sig_87) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_96)
    begin
        if (ap_sig_96) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_110)
    begin
        if (ap_sig_110) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_119)
    begin
        if (ap_sig_119) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_133)
    begin
        if (ap_sig_133) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_142)
    begin
        if (ap_sig_142) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    current_1_fu_216_p3 <= 
        p_current_fu_208_p3 when (tmp_5_reg_318(0) = '1') else 
        current_reg_102;
    current_2_fu_241_p3 <= 
        p_current_1_fu_234_p3 when (tmp_s_reg_333(0) = '1') else 
        current_1_reg_338;
        current_3_fu_205_p1 <= std_logic_vector(resize(signed(left_reg_307),32));

        current_4_fu_231_p1 <= std_logic_vector(resize(signed(right_reg_312),32));

    endA_cast_fu_129_p1 <= std_logic_vector(resize(unsigned(endA),16));
    grp_fu_123_p2 <= "1" when (signed(A_q0) < signed(A_q1)) else "0";
    i_1_fu_155_p2 <= std_logic_vector(unsigned(i_reg_112) + unsigned(ap_const_lv9_1));
    i_cast_fu_146_p1 <= std_logic_vector(resize(unsigned(i_reg_112),10));
    left_fu_173_p2 <= (tmp_4_fu_165_p3 or ap_const_lv16_1);
    p_current_1_fu_234_p3 <= 
        current_4_fu_231_p1 when (grp_fu_123_p2(0) = '1') else 
        current_1_reg_338;
    p_current_fu_208_p3 <= 
        current_3_fu_205_p1 when (grp_fu_123_p2(0) = '1') else 
        current_reg_102;
    right_fu_179_p2 <= std_logic_vector(unsigned(ap_const_lv16_2) + unsigned(tmp_4_fu_165_p3));
    startA_cast_fu_133_p1 <= std_logic_vector(resize(unsigned(startA),16));
        tmp_11_fu_250_p1 <= std_logic_vector(resize(signed(p_0_fu_30),32));

    tmp_12_fu_254_p2 <= "1" when (current_2_reg_355 = tmp_11_fu_250_p1) else "0";
        tmp_13_fu_259_p1 <= std_logic_vector(resize(signed(current_2_reg_355),64));

        tmp_14_fu_263_p1 <= std_logic_vector(resize(signed(p_0_fu_30),64));

    tmp_15_fu_268_p1 <= current_2_reg_355(16 - 1 downto 0);
        tmp_1_fu_227_p1 <= std_logic_vector(resize(signed(right_reg_312),64));

    tmp_2_fu_150_p2 <= "1" when (signed(i_cast_fu_146_p1) < signed(endA)) else "0";
    tmp_3_fu_161_p1 <= current_reg_102(15 - 1 downto 0);
    tmp_4_fu_165_p3 <= (tmp_3_fu_161_p1 & ap_const_lv1_0);
    tmp_5_fu_185_p2 <= "1" when (signed(left_fu_173_p2) < signed(endA_cast_reg_288)) else "0";
        tmp_6_fu_190_p1 <= std_logic_vector(resize(signed(current_reg_102),64));

        tmp_7_fu_195_p1 <= std_logic_vector(resize(signed(left_fu_173_p2),64));

        tmp_9_fu_223_p1 <= std_logic_vector(resize(signed(current_1_reg_338),64));

    tmp_fu_137_p1 <= std_logic_vector(resize(unsigned(startA),32));
    tmp_s_fu_200_p2 <= "1" when (signed(right_fu_179_p2) < signed(endA_cast_reg_288)) else "0";
end behav;
