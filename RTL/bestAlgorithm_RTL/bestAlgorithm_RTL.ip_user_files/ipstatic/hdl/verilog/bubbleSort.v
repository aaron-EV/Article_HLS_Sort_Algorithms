// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bubbleSort,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.164000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=15,HLS_SYN_LUT=23}" *)

module bubbleSort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        indexOutputData,
        operation_V,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1,
        ap_return
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv3_7 = 3'b111;
parameter    ap_const_lv16_0 = 16'b0000000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] indexOutputData;
input  [0:0] operation_V;
output  [1:0] A_address0;
output   A_ce0;
output   A_we0;
output  [15:0] A_d0;
input  [15:0] A_q0;
output  [1:0] A_address1;
output   A_ce1;
output   A_we1;
output  [15:0] A_d1;
input  [15:0] A_q1;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] A_address0;
reg A_ce0;
reg A_we0;
reg[1:0] A_address1;
reg A_ce1;
reg A_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
wire   [0:0] operation_V_read_read_fu_36_p2;
wire   [1:0] j_fu_108_p2;
reg   [1:0] j_reg_146;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_54;
reg   [1:0] A_addr_reg_151;
wire   [0:0] exitcond_i_fu_102_p2;
reg   [1:0] A_addr_1_reg_156;
wire   [2:0] i_fu_124_p2;
reg   [2:0] indvars_iv_i_reg_67;
reg   [1:0] j_i_reg_79;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_80;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_88;
wire   [0:0] tmp_fu_90_p3;
wire   [63:0] tmp_2_i_fu_114_p1;
wire   [63:0] tmp_5_i_fu_119_p1;
wire   [0:0] tmp_6_i_fu_130_p2;
wire   [2:0] j_i_cast_fu_98_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (operation_V_read_read_fu_36_p2 == 1'b0))) begin
        indvars_iv_i_reg_67 <= ap_const_lv3_3;
    end else if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond_i_fu_102_p2 == 1'b0))) begin
        indvars_iv_i_reg_67 <= i_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((operation_V_read_read_fu_36_p2 == 1'b0) & (1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == tmp_fu_90_p3))) begin
        j_i_reg_79 <= ap_const_lv2_0;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_i_reg_79 <= j_reg_146;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond_i_fu_102_p2 == 1'b0))) begin
        A_addr_1_reg_156 <= tmp_5_i_fu_119_p1;
        A_addr_reg_151 <= tmp_2_i_fu_114_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_reg_146 <= j_fu_108_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_address0 = A_addr_reg_151;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        A_address0 = tmp_2_i_fu_114_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_address1 = A_addr_1_reg_156;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        A_address1 = tmp_5_i_fu_119_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_6_i_fu_130_p2))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_6_i_fu_130_p2))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (~(operation_V_read_read_fu_36_p2 == 1'b0) | ~(1'b0 == tmp_fu_90_p3)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (~(operation_V_read_read_fu_36_p2 == 1'b0) | ~(1'b0 == tmp_fu_90_p3)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_88) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_54) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_80) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((~(operation_V_read_read_fu_36_p2 == 1'b0) | ~(1'b0 == tmp_fu_90_p3))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(exitcond_i_fu_102_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_d0 = A_q1;

assign A_d1 = A_q0;

assign ap_return = ap_const_lv16_0;

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_54 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_80 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_88 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign exitcond_i_fu_102_p2 = ((j_i_cast_fu_98_p1 == indvars_iv_i_reg_67) ? 1'b1 : 1'b0);

assign i_fu_124_p2 = ($signed(indvars_iv_i_reg_67) + $signed(ap_const_lv3_7));

assign j_fu_108_p2 = (j_i_reg_79 + ap_const_lv2_1);

assign j_i_cast_fu_98_p1 = j_i_reg_79;

assign operation_V_read_read_fu_36_p2 = operation_V;

assign tmp_2_i_fu_114_p1 = j_i_reg_79;

assign tmp_5_i_fu_119_p1 = j_fu_108_p2;

assign tmp_6_i_fu_130_p2 = (($signed(A_q0) > $signed(A_q1)) ? 1'b1 : 1'b0);

assign tmp_fu_90_p3 = indvars_iv_i_reg_67[ap_const_lv32_2];

endmodule //bubbleSort
